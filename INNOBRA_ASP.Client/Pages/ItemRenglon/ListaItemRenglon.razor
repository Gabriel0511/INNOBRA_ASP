@page "/api/ItemRenglones"
@inject IHttpServicio http

<h3>Items Renglones</h3>

@if (listaItemsRenglones != null && listaItemsRenglones.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Material Previsto</th>
                <th scope="col">Cantidad</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itemRenglon in listaItemsRenglones)
            {
                <tr>
                    <td>@itemRenglon.MaterialPrevisto</td>
                    <td>@itemRenglon.Cantidad</td>
                    <td>
                        <a class="btn btn-warning btn-sm" href="/api/ItemRenglones/editar/@itemRenglon.Id">Editar</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(itemRenglon.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning" role="alert">
        No hay items renglones registrados.
    </div>
}

<a class="btn btn-primary" href="/api/ItemRenglones/Crear">
    <i class="bi bi-plus-circle"></i> Crear Item Renglon
</a>

@code {
    List<ItemRenglon> listaItemsRenglones = new List<ItemRenglon>();
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<ItemRenglon>>("api/ItemRenglones");
        if (!resp.Error)
        {
            listaItemsRenglones = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task Eliminar(int id)
    {
        var resp = await http.Delete($"api/ItemRenglones/{id}");
        if (!resp.Error)
        {
            await Leer(); // Recarga la lista después de eliminar
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }
}
