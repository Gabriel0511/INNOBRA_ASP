@page "/api/ItemRenglones"
@inject IHttpServicio http
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
    <div class="overlay"></div>

<div class="contenedor-formulario">

    <h3>Items Renglones</h3>

    @if (listaItemsRenglones != null && listaItemsRenglones.Any())
    {
        <table>
            <thead>
                <tr>
                    <th scope="col">Material Previsto</th>
                    <th scope="col">Cantidad</th>
                    <th scope="col">Item</th>
                    <th scope="col">Recurso</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var itemRenglon in listaItemsRenglones)
                {
                    <tr>
                        <td>@itemRenglon.MaterialPrevisto</td>
                        <td>@itemRenglon.Cantidad</td>
                        <td>@itemRenglon.Item_Id</td>
                        <td>@MostrarNombreRecurso(itemRenglon.Recursos_Id)</td>
                        <td>
                            <a class="btn btn-warning btn-sm" href="/api/ItemRenglones/editar/@itemRenglon.Id">Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(itemRenglon.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay items renglones registrados.
        </div>
    }

    <br/>

    <a class="btn btn-primary" href="/api/ItemRenglones/Crear">
        <i class="bi bi-plus-circle"></i> Crear Item Renglon
    </a>

</div>

@code {
    List<ItemRenglon> listaItemsRenglones = new List<ItemRenglon>();
    List<Recurso> listaRecursos = new List<Recurso>();
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
        await CargarRecurso();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<ItemRenglon>>("api/ItemRenglones");
        if (!resp.Error)
        {
            listaItemsRenglones = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task CargarRecurso()
    {
        var respuesta = await http.Get<List<Recurso>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }
    }

    private string MostrarNombreRecurso(int RecursoId)
    {
        var recurso = listaRecursos?.FirstOrDefault(r => r.Id == RecursoId);
        return recurso?.Nombre ?? "Sin asignar";
    }

    private async Task Eliminar(int id)
    {
        var resp = await http.Delete($"api/ItemRenglones/{id}");
        if (!resp.Error)
        {
            await Leer(); // Recarga la lista después de eliminar
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }
}
