@page "/api/Items/lista/{idObra:int}/{idPresupuesto:int}"
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService
@inject NavigationManager nav

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">


    <button type="button" class="btn btn-primary" @onclick="Volver"><i class="bi bi-arrow-left"></i> Volver</button>

    <h3>Items - Presupuesto: @nombrePresupuesto</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            No hay items disponibles para este presupuesto.
        </div>
    }

    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }

    @if (listaItems != null && listaItems.Any(p => p.Presupuesto_Id == idPresupuesto))
    {
        <table>
            <thead>
                <tr>
                    <th scope="col">Tiempo Estimado</th>
                    <th scope="col">Unidad de Tiempo</th>
                    <th scope="col">Material Estimado</th>
                    <th scope="col">Item Tipo</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listaItems.Where(p => p.Presupuesto_Id == idPresupuesto))
                {
                    <tr>
                        <td>@item.Tiempo_estimado</td>
                        <td>@item.Unidad_Tiempo</td>
                        <td>@item.Material_estimado</td>
                        <td>@MostrarNombreItemTipo(item.Item_Tipos_Id)</td>
                        <td>
                            <a class="btn btn-violet btn-sm" href="/api/Avances/@idObra/@idPresupuesto/@item.Id" title="Ver Avances"><i class="bi bi-eye" style="color: black;"></i></a>
                            <a class="btn btn-warning btn-sm" href="Api/Items/editar/@idObra/@idPresupuesto/@item.Id"><i class="bi bi-pencil"></i> </a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item.Id)"><i class="bi bi-trash3"></i></button>
                            <button class="btn btn-success btn-sm" @onclick="() => FinalizarItem(item.Id)"><i class="bi bi-check-circle"></i> Finalizar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (cargando)
        {

        }
        else
        {
            <div class="alert alert-warning" role="alert">
                No hay items disponibles para este presupuesto.
            </div>
        }
    }

    <br/>

    <a class="btn btn-primary" href="/api/Items/crear/@idObra/@idPresupuesto">
        <i class="bi bi-plus-circle"></i> Crear Item
    </a>
    
</div>

<style>
    .btn-violet {
        background-color: violet !important;
        color: white !important;
        border: none;
    }

        .btn-violet:hover {
            background-color: purple !important;
        }
</style>

@code {
    [Parameter] public int idObra { get; set; }
    [Parameter] public int idPresupuesto { get; set; }

    List<Item> listaItems = new List<Item>();
    List<ItemTipo> listaItemsTipos = new List<ItemTipo>();
    List<Presupuesto> listaPresupuestos = new List<Presupuesto>();
    List<Avance> listaAvances = new List<Avance>();

    private Presupuesto presupuestoSeleccionado;
    string nombrePresupuesto = ""; 

    string Mensaje = "";

    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarPresupuesto();
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
        await CargarItemTipo();
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar cualquier mensaje de error previo

            var resp = await http.Get<List<Item>>("Api/Items");
            if (!resp.Error)
            {
                listaItems = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los items: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarPresupuesto()
    {
        var respuesta = await http.Get<List<Presupuesto>>("api/Presupuestos");
        if (!respuesta.Error)
        {
            listaPresupuestos = respuesta.Respuesta; // Poblamos la lista de obras

            // Buscar la obra correspondiente al idObra
            presupuestoSeleccionado = listaPresupuestos.FirstOrDefault(presupuesto => presupuesto.Id == idPresupuesto);
            if (presupuestoSeleccionado != null)
            {
                nombrePresupuesto = presupuestoSeleccionado.Nombre; // Asignar el nombre de la obra
            }
            else
            {
                Mensaje = "Presupuesto no encontrado.";
            }
        }
        else
        {
            Mensaje = "Error al cargar los presupuestos.";
        }
    }

    private async Task CargarItemTipo()
    {
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemTipos");
        if (!respuesta.Error)
        {
            listaItemsTipos = respuesta.Respuesta;
        }
    }

    private string MostrarNombreItemTipo(int itemTipoId)
    {
        var itemTipo = listaItemsTipos?.FirstOrDefault(r => r.Id == itemTipoId);
        return itemTipo?.Nombre ?? "Sin asignar";
    }

    private string MostrarPresupuesto(int presupuestoid)
    {
        var presupuesto = listaPresupuestos?.FirstOrDefault(r => r.Id == presupuestoid);
        return presupuesto?.Nombre ?? "Sin asignar";
    }


    private async Task Eliminar(int itemId)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado)
        {
            try
            {
                var resp2 = await http.Get<List<Avance>>("api/Avances");
                listaAvances = resp2.Respuesta;
                foreach (var itemavance in listaAvances)
                {
                    if (itemavance.Item_Id == itemId)
                    {
                        var resp3 = await http.Delete($"api/Avances/{itemavance.Id}");
                        if (resp3.Error)
                        {
                            Mensaje = "No se pudo borrar el avance";
                        }
                    }
                }

                var resp = await http.Delete($"Api/Items/{itemId}");
                if (!resp.Error)
                {
                    await Leer();
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }

    private async Task FinalizarItem(int itemId)
    {
        // Obtener el ítem seleccionado
        var item = listaItems.FirstOrDefault(i => i.Id == itemId);
        if (item == null)
        {
            await js.InvokeVoidAsync("alert", "Ítem no encontrado.");
            return;
        }

        // Obtener los avances desde la API
        var avancesResp = await http.Get<List<Avance>>("api/Avances");
        if (avancesResp.Error)
        {
            await js.InvokeVoidAsync("alert", "Error al cargar los avances.");
            return;
        }

        // Filtrar los avances para el ítem actual
        var avancesItem = avancesResp.Respuesta
            .Where(a => a.Item_Id == itemId)
            .OrderByDescending(a => a.FechaFinalizacionReal)
            .ToList();

        if (!avancesItem.Any())
        {
            await js.InvokeVoidAsync("alert", "No hay avances registrados para este ítem.");
            return;
        }

        var ultimoAvance = avancesItem.First();

        // Calcular el tiempo real
        var tiempoReal = CalcularTiempoReal(item, ultimoAvance);

        // Verifica si MaterialEjecutado es un número válido
        if (int.TryParse(ultimoAvance.MaterialEjecutado, out int materialEjecutado))
        {
            var comparacionMaterial = CompararMaterial(item.Material_estimado, materialEjecutado);

            // Crear el contenido del informe
            var contenido = $"Informe del Ítem {itemId}:\n\n" +
                            $"Tiempo Estimado: {item.Tiempo_estimado} {item.Unidad_Tiempo}\n" +
                            $"{tiempoReal}\n\n" +
                            $"Material Estimado: {item.Material_estimado}\n" +
                            $"Material Empleado: {materialEjecutado}\n\n" +
                            $"Comparación de Material: {comparacionMaterial}";

            // Generar el PDF (sin mostrar el cuadro de diálogo)
            await GenerarPDF(contenido);
        }
        else
        {
            await js.InvokeVoidAsync("alert", "El material ejecutado no es un valor numérico válido.");
        }
    }

    private string CalcularTiempoReal(Item item, Avance ultimoAvance)
    {
        // Obtener la fecha actual
        var fechaActual = DateTime.Now;

        // Calcular la fecha estimada de finalización
        DateTime fechaEstimadaFinalizacion;
        switch (item.Unidad_Tiempo.ToLower().Trim())
        {
            case "dias":
                fechaEstimadaFinalizacion = fechaActual.AddDays(item.Tiempo_estimado);
                break;
            case "meses":
                fechaEstimadaFinalizacion = fechaActual.AddMonths(item.Tiempo_estimado);
                break;
            case "años":
                fechaEstimadaFinalizacion = fechaActual.AddYears(item.Tiempo_estimado);
                break;
            default:
                return "Unidad de tiempo no válida. Use días, meses o años.";
        }

        // Obtener la fecha de finalización real del último avance
        var fechaFinalizacionReal = ultimoAvance.FechaFinalizacionReal;

        // Calcular la diferencia en días entre la fecha estimada y la fecha real
        var diferenciaDias = (fechaFinalizacionReal - fechaEstimadaFinalizacion).TotalDays;

        // Convertir la diferencia a un número entero (sin redondear)
        int diferenciaDiasEntero = (int)diferenciaDias;

        // Determinar si el avance se completó antes o después de lo estimado
        string comparacionTiempo;
        if (diferenciaDiasEntero == 0)
        {
            comparacionTiempo = "El avance se completó exactamente en la fecha estimada.";
        }
        else if (diferenciaDiasEntero < 0)
        {
            comparacionTiempo = $"El avance se completó {Math.Abs(diferenciaDiasEntero)} días antes de lo estimado.";
        }
        else
        {
            comparacionTiempo = $"El avance se completó {diferenciaDiasEntero} días después de lo estimado.";
        }

        return $"Fecha Estimada de Finalización: {fechaEstimadaFinalizacion.ToShortDateString()}\n" +
               $"Fecha Real de Finalización: {fechaFinalizacionReal.ToShortDateString()}\n" +
               $"Comparación: {comparacionTiempo}";
    }

    // Método para comparar el tiempo estimado con el tiempo real
    private string CompararTiempo(int tiempoEstimado, double tiempoReal, string unidadTiempo)
    {
        if (tiempoReal == tiempoEstimado)
        {
            return "El tiempo real coincide con el estimado.";
        }
        else if (tiempoReal < tiempoEstimado)
        {
            return $"El tiempo real fue menor que el estimado. Diferencia: {tiempoEstimado - tiempoReal:F2} {unidadTiempo}.";
        }
        else
        {
            return $"El tiempo real fue mayor que el estimado. Diferencia: {tiempoReal - tiempoEstimado:F2} {unidadTiempo}.";
        }
    }

    // Método para comparar el material estimado con el material empleado
    private string CompararMaterial(int materialEstimado, int materialEmpleado)
    {
        if (materialEmpleado == materialEstimado)
        {
            return "El material empleado coincide con el estimado.";
        }
        else if (materialEmpleado < materialEstimado)
        {
            return $"Se utilizó menos material del estimado. Diferencia: {materialEstimado - materialEmpleado}.";
        }
        else
        {
            return $"Se utilizó más material del estimado. Diferencia: {materialEmpleado - materialEstimado}.";
        }
    }

    private async Task GenerarPDF(string contenido)
    {
        // Invocar la función JavaScript para generar el PDF
        await js.InvokeVoidAsync("generarPDF", contenido);
    }

    private void Volver()
    {

        nav.NavigateTo($"/api/Presupuestos/lista/{idObra}");
    }
}