@page "/Api/Items"
@inject IHttpServicio http
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
    <div class="overlay"></div>

<div class="contenedor-formulario">

    <h3>Items</h3>

    @if (listaItems != null && listaItems.Any())
    {
        <table>
            <thead>
                <tr>
                    <th scope="col">Tiempo Estimado</th>
                    <th scope="col">Unidad de Tiempo</th>
                    <th scope="col">Material Estimado</th>
                    <th scope="col">Item Tipo</th>
                    <th scope="col">Presupuesto</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listaItems)
                {
                    <tr>
                        <td>@item.Tiempo_estimado</td>
                        <td>@item.Unidad_Tiempo</td>
                        <td>@item.Material_estimado</td>
                        <td>@MostrarNombreItemTipo(item.Item_Tipos_Id)</td>
                        <td>@MostrarPresupuesto(item.Presupuesto_Id)</td>
                        <td>
                            <a class="btn btn-warning btn-sm" href="Api/Items/editar/@item.Id">Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay items registrados.
        </div>
    }

    <br/>

    <a class="btn btn-primary" href="/api/Items/crear">
        <i class="bi bi-plus-circle"></i> Crear Item
    </a>
    
</div>

@code {
    List<Item> listaItems = new List<Item>();
    List<ItemTipo> listaItemsTipos = new List<ItemTipo>();
    List<Presupuesto> listaPresupuestos = new List<Presupuesto>();

    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
        await CargarItemTipo();
        await CargarPresupuesto();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Item>>("Api/Items");
        if (!resp.Error)
        {
            listaItems = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task CargarItemTipo()
    {
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemTipos");
        if (!respuesta.Error)
        {
            listaItemsTipos = respuesta.Respuesta;
        }
    }

    private string MostrarNombreItemTipo(int itemTipoId)
    {
        var itemTipo = listaItemsTipos?.FirstOrDefault(r => r.Id == itemTipoId);
        return itemTipo?.Nombre ?? "Sin asignar";
    }

    private async Task CargarPresupuesto()
    {
        var respuesta = await http.Get<List<Presupuesto>>("Api/Presupuestos");
        if (!respuesta.Error)
        {
            listaPresupuestos = respuesta.Respuesta;
        }
    }

    private string MostrarPresupuesto(int presupuestoid)
    {
        var presupuesto = listaPresupuestos?.FirstOrDefault(r => r.Id == presupuestoid);
        return presupuesto?.Nombre ?? "Sin asignar";
    }


    private async Task Eliminar(int id)
    {
        var resp = await http.Delete($"Api/Items/{id}");
        if (!resp.Error)
        {
            await Leer(); // Recarga la lista después de eliminar
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }
}