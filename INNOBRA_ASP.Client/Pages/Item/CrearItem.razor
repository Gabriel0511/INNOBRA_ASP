@page "/Api/Items/crear/{id:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService
@inject NavigationManager NavigationManager


<div class="fondo"></div>
    <div class="overlay"></div>
    <div class="contenedor-formulario">

<h3>Crear Item</h3>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @mensajeError
    </div>
}

<EditForm Model="@item" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Tiempo Estimado:</label>
        <InputNumber class="form-control" @bind-Value="item.Tiempo_estimado" />
        <ValidationMessage For="@(() => item.Tiempo_estimado)" />
    </div >

    <div class="mb-3">
        <label>Unidad de tiempo:</label>
        <div>
            <select class="form-control" @bind="item.Unidad_Tiempo">
                <option value="">Seleccione la unidad de tiempo</option>
                        @foreach (var undTiempo in undTiempo)
                        {
                        <option value="@undTiempo">@undTiempo</option>
                        }
            </select>
            <ValidationMessage For="@(() => item.Unidad_Tiempo)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Material Estimado:</label>
        <InputNumber class="form-control" @bind-Value="item.Material_estimado" />
        <ValidationMessage For="@(() => item.Material_estimado)" />
    </div >

    <div class="mb-3">
        <label>Item Tipo</label>
        <div>
            <select class="form-control" @bind="item.Item_Tipos_Id">
                <option value="">Seleccione un item tipo</option>
                @foreach (var itemTipo in itemTipos)
                {
                    <option value="@itemTipo.Id">@itemTipo.Nombre</option>
                }
            </select>
                <button class="btn btn-secondary" @onclick="() => NavigateToCrearItemTipo()" title="Crear nuevo Item Tipo">
                    <i class="bi bi-plus"></i> Crear
                </button>

                <ValidationMessage For="@(() => item.Item_Tipos_Id)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Presupuesto</label>
        <div>
            <select class="form-control" @bind="item.Presupuesto_Id">
                <option value="">Seleccione un presupuesto</option>
                @foreach (var presupuesto in presupuestos)
                {
                    <option value="@presupuesto.Id">@presupuesto.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => item.Presupuesto_Id)" />
        </div>
    </div>


    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

    </div>

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public int idPresupuesto { get; set; }
    private CrearItemDTO item = new CrearItemDTO();
    private Presupuesto presupuestoSeleccionado;
    private List<Item> listaItems = new();
    private List<ItemTipo> itemTipos = new List<ItemTipo>();
    private List<Presupuesto> presupuestos = new List<Presupuesto>();
    private List<string> undTiempo = new List<string> { "Horas", "Dias", "Meses", "Años" };

    private string mensajeError;

    protected override async Task OnInitializedAsync()
    {
        await CargarItems();
        await CargarItemsTipos();
        await CargarPresupuesto();

        // Asignar la obra seleccionada a la propiedad presupuesto.Obra_Id
        presupuestoSeleccionado = presupuestos.FirstOrDefault(p => p.Id == id);

        if (presupuestoSeleccionado != null)
        {
            item.Presupuesto_Id = presupuestoSeleccionado.Id; // Asigna el ID del presupuesto seleccionado al item
        }
        else
        {
            mensajeError = "Presupuesto no encontrado.";
        }
    }

    private async Task CargarItems()
    {
        var respuesta = await http.Get<List<Item>>("Api/Items");
        if (!respuesta.Error)
        {
            listaItems = respuesta.Respuesta;
        }
        else
        {
            mensajeError = "Error al cargar los items.";
        }
    }

    private async Task CargarItemsTipos()
    {
        // Llama al servicio para obtener la lista de obras
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemTipos");
        if (!respuesta.Error)
        {
            itemTipos = respuesta.Respuesta;  // Poblamos la lista de obras, no la de presupuestos
        }
        else
        {
            mensajeError = "Error al cargar los items tipo.";
        }
    }

    private async Task CargarPresupuesto()
    {
        // Llama al servicio para obtener la lista de obras
        var respuesta = await http.Get<List<Presupuesto>>("api/Presupuestos");
        if (!respuesta.Error)
        {
            presupuestos = respuesta.Respuesta;  // Poblamos la lista de obras, no la de presupuestos
        }
        else
        {
            mensajeError = "Error al cargar los presupuestos.";
        }
    }

    private Item MapearACrearItem(CrearItemDTO dto)
    {
        return new Item
            {
                Tiempo_estimado = dto.Tiempo_estimado,
                Unidad_Tiempo = dto.Unidad_Tiempo,
                Material_estimado = dto.Material_estimado,
                Item_Tipos_Id = dto.Item_Tipos_Id,
                Presupuesto_Id = dto.Presupuesto_Id
            };
    }


    private async Task Grabar()
    {
        if (item.Item_Tipos_Id == 0 || item.Presupuesto_Id == 0)
        {
            mensajeError = "Los campos Item Tipo y Presupuesto son obligatorios.";
            return;
        }

        // Mapear el DTO a la entidad Item
        var itemEntidad = MapearACrearItem(item);

        if (!httpRespuesta.Error)
        {
            // Si el item se crea correctamente, establecer el mensaje
            mensajeService.Mensaje = "Item agregado con éxito.";

            // Redirigir a la página de lista después de un breve retraso
            await Task.Delay(1500);
            nav.NavigateTo("/Api/Items");
        }
        else
        {
            // Si ocurre un error, establecer el mensaje de error
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }

        // if (httpRespuesta.Error)
        // {
        //     mensajeError = $"Error al guardar el item: {httpRespuesta.HttpResponseMessage.ReasonPhrase}";
        // }
        // else
        // {
        //     nav.NavigateTo("/Api/Items");
        // }
    }

    private void NavigateToCrearItemTipo()
    {
        NavigationManager.NavigateTo("/api/ItemTipos/crear");
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}