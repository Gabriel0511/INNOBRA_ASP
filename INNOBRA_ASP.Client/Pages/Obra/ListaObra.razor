@page "/api/Obras"
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Obras</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            @Mensaje
        </div>
    }

    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (listaObras != null && listaObras.Any())
    {
        <table class="table-obras">
            <thead>
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Fecha Inicio</th>
                    <th scope="col">Fecha Fin</th>
                    <th scope="col">Imagen</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obra in listaObras)
                {
                    <tr>
                        <td>
                            <div class="d-flex justify-content-between">
                                <span>@obra.Nombre</span>
                                <button class="btn btn-info btn-sm" @onclick="() => TogglePresupuestos(obra)" title="Ver Presupuestos">
                                    <i class="bi bi-chevron-down"></i>
                                </button>
                            </div>
                        </td>
                        <td>@obra.FechaInicio.ToString("dd-MM-yyyy")</td>
                        <td>@obra.FechaFin.ToString("dd-MM-yyyy")</td>
                        <td>
                            @if (obra.Imagen != null && obra.Imagen.Length > 0)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(obra.Imagen)" alt="Imagen de la obra" style="width: 100px; height: auto;" />
                            }
                            else
                            {
                                <span>No disponible</span>
                            }
                        </td>
                        <td>
                            <a class="btn btn-success btn-sm" href="/api/Presupuestos/crear/@obra.Id" title="Agregar Presupuesto"><i class="bi bi-plus"></i></a>
                            <a class="btn btn-warning btn-sm" href="/api/Obras/editar/@obra.Id" title="Editar"><i class="bi bi-pencil"></i></a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(obra.Id)" title="Eliminar"><i class="bi bi-trash3"></i></button>
                        </td>
                    </tr>

                    @if (obraSeleccionada?.Id == obra.Id)
                    {
                        <tr>
                            <td colspan="5">
                                <div class="expandable @(showPresupuestos ? "" : "collapsed")">
                                    @if (presupuestos.Where(p => p.Obra_Id == obra.Id).Any())
                                    {
                                        <table class="table-presupuestos">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Presupuesto</th>
                                                    <th scope="col">Fecha Inicio Prevista</th>
                                                    <th scope="col">Fecha Fin Prevista</th>
                                                    <th scope="col">Acciones</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var presupuesto in presupuestos.Where(p => p.Obra_Id == obra.Id))
                                                {
                                                    <tr>
                                                        <td>@presupuesto.Nombre</td>
                                                        <td>@presupuesto.FechaInicioPrevista.ToString("dd-MM-yyyy")</td>
                                                        <td>@presupuesto.FechaFinPrevista.ToString("dd-MM-yyyy")</td>
                                                        <td>
                                                            <a class="btn btn-warning btn-sm" href="/api/Presupuestos/editar/@presupuesto.Id"><i class="bi bi-pencil"></i></a>
                                                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarPresupuesto(presupuesto.Id)"><i class="bi bi-trash3"></i></button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                    else
                                    {
                                        <div class="alert alert-info" role="alert">
                                            Esta obra no tiene presupuestos disponibles.
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay obras disponibles.
        </div>
    }
    <br />
    <a class="btn btn-success btn-sm" href="/api/Obras/crear">
        <i class="bi bi-plus-circle"></i> Agregar Obra
    </a>
</div>

<style>
    .table-obras, .table-presupuestos {
        width: 100%;
    }
</style>

@code {
    List<Obra> listaObras = new List<Obra>();
    List<Presupuesto> presupuestos = new List<Presupuesto>();
    Obra obraSeleccionada;
    bool showPresupuestos = false;
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(3000);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
        await LeerPresupuestos();
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar el mensaje de error

            var resp = await http.Get<List<Obra>>("api/Obras");
            if (!resp.Error)
            {
                listaObras = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar las obras: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task LeerPresupuestos()
    {
        try
        {
            var resp = await http.Get<List<Presupuesto>>("api/Presupuestos");
            if (!resp.Error)
            {
                presupuestos = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los presupuestos: {ex.Message}";
        }
    }

    private void TogglePresupuestos(Obra obra)
    {
        if (obraSeleccionada == obra)
        {
            // Si la obra seleccionada es la misma, la ocultamos
            showPresupuestos = !showPresupuestos;
        }
        else
        {
            // Si no es la misma obra, mostramos los presupuestos
            obraSeleccionada = obra;
            showPresupuestos = true;
        }
    }

    private async Task Eliminar(int id)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");

        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Obras/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar la obra: {ex.Message}";
            }
        }

    }


    private async Task EliminarPresupuesto(int presupuestoId)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Presupuestos/{presupuestoId}");
                if (!resp.Error)
                {
                    await LeerPresupuestos(); // Recargar los presupuestos después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }
}
