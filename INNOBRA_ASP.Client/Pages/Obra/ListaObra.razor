@page "/api/Obras"
@using System.Text
@using INNOBRA_ASP.Shared.DTO
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">

    <h3>Obras</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            @Mensaje
        </div>
    }

    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (listaObras != null && listaObras.Any())
    {
        <table class="table-obras">
            <thead>
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Fecha Inicio</th>
                    <th scope="col">Fecha Fin</th>
                    <th scope="col">Imagen</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obra in listaObras)
                {
                    <tr>
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="flex-grow-1">@obra.Nombre</span>
                                @if (obra.Finalizada)
                                {
                                    <span style="color: red;">Obra Finalizada</span>
                                }
                                <div style="flex-shrink: 0;"></div>
                            </div>
                        </td>
                        <td>@obra.FechaInicio.ToString("dd-MM-yyyy")</td>
                        <td>@obra.FechaFin.ToString("dd-MM-yyyy")</td>
                        <td>
                            @if (obra.Imagen != null && obra.Imagen.Length > 0)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(obra.Imagen)" alt="Imagen de la obra" style="width: 100px; height: auto;" />
                            }
                            else
                            {
                                <span>No disponible</span>
                            }
                        </td>
                        <td>
                            @if (!obra.Finalizada)
                            {
                                <a class="btn btn-violet btn-sm" href="/api/Presupuestos/lista/@obra.Id" title="Ver Presupuestos">
                                    <i class="bi bi-eye" style="color: black;"></i>
                                </a>
                                <a class="btn btn-warning btn-sm" href="/api/Obras/editar/@obra.Id" title="Editar">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(obra.Id)" title="Eliminar">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            }
                            <button class="btn btn-success btn-sm" @onclick="() => FinalizarObra(obra.Id)" title="@(obra.Finalizada ? "Generar Informe" : "Finalizar Obra")">
                                <i class="bi bi-house-check"></i> @(obra.Finalizada ? "Generar Informe" : "Finalizar Obra")
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay obras disponibles.
        </div>
    }
    <a class="btn btn-primary" href="/api/Obras/crear">
        <i class="bi bi-plus-circle"></i> Agregar Obra
    </a>
</div>

<style>
/* Estilos para restringir datos largos en celdas de tabla */
.table-obras td, .table-presupuestos td {
    word-wrap: break-word;
    word-break: break-word;
    white-space: normal;
    max-width: 150px; /* Ajusta este valor según el ancho máximo deseado */
    overflow: hidden;
}

/* Opcional: ajustar también el ancho de las columnas de encabezado si es necesario */
.table-obras th, .table-presupuestos th {
    max-width: 150px;
}

    /* Cambiar color del encabezado de las tablas */
    .table-obras thead tr th {
        background-color: #326dc7;
        color: white;
    }

    .table-presupuestos thead tr th {
        background-color: #737544;
        color: white;
    }

    .table-items thead tr th {
        background-color: #3c573c;
        color: white;
    }

    .btn-violet {
        background-color: violet !important;
        color: white !important;
        border: none;
    }

        .btn-violet:hover {
            background-color: purple !important;
        }


</style>

<script>
    function generarPDF(contenido) {
        // Crear una instancia de jsPDF
        const doc = new jspdf.jsPDF();

        // Configurar título
        doc.setFont("helvetica", "bold"); // Fuente en negrita
        doc.setFontSize(16);
        doc.text("Informe INNOBRA", doc.internal.pageSize.width / 2, 20, { align: "center" });

        // Configurar márgenes y posición inicial
        const margenIzquierdo = 15;
        let posicionY = 35; // Posición vertical inicial
        const anchoMaximo = 180;

        // Tamaño de fuente y espaciado
        const tamanoFuenteNormal = 12;
        const tamanoFuenteSubtitulo = 12;
        const interlineado = 7; // Reducir el interlineado

        // Dividir el contenido en líneas
        const lineas = contenido.split("\n");

        // Recorrer cada línea del contenido
        lineas.forEach(linea => {
            // Verificar si la línea es un subtítulo
            if (linea.startsWith("Informe de la Obra:") ||
                linea.startsWith("Presupuesto:") ||
                linea.startsWith("Ítems:")) {
                // Cambiar a fuente en negrita para subtítulos
                doc.setFont("helvetica", "bold");
                doc.setFontSize(tamanoFuenteSubtitulo);
            } else {
                // Cambiar a fuente normal para el resto del contenido
                doc.setFont("helvetica", "normal");
                doc.setFontSize(tamanoFuenteNormal);
            }

            // Agregar la línea al PDF
            doc.text(linea, margenIzquierdo, posicionY, { maxWidth: anchoMaximo });

            // Aumentar la posición vertical para la siguiente línea
            posicionY += interlineado; // Espaciado reducido entre líneas

            // Si la posición Y supera el límite de la página, agregar una nueva página
            if (posicionY > doc.internal.pageSize.height - 20) {
                doc.addPage();
                posicionY = 20; // Reiniciar la posición Y en la nueva página
            }
        });

        // Guardar el PDF con un nombre de archivo
        doc.save("informe.pdf");
    }
</script>

@code {
    List<Obra> listaObras = new List<Obra>();
    List<Presupuesto> presupuestos = new List<Presupuesto>();
    List<Item> items = new List<Item>();
    List<ItemTipo> itemTipos = new List<ItemTipo>();
    List<Avance> listaAvances = new List<Avance>();
    Obra obraSeleccionada;
    Presupuesto presupuestoSeleccionado;
    bool showPresupuestos = false;
    bool showItems = false;
    string Mensaje = "";
    string mensajeError;
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await CargarItemTipos();
        await Leer();
        await LeerPresupuestos();
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar el mensaje de error

            var resp = await http.Get<List<Obra>>("api/Obras");
            if (!resp.Error)
            {
                listaObras = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar las obras: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task LeerPresupuestos()
    {
        try
        {
            var resp = await http.Get<List<Presupuesto>>("api/Presupuestos");
            if (!resp.Error)
            {
                presupuestos = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los presupuestos: {ex.Message}";
        }
    }

    private async Task LeerItems()
    {
        try
        {
            var resp = await http.Get<List<Item>>("Api/Items");
            if (!resp.Error)
            {
                items = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los items: {ex.Message}";
        }
    }

    private async Task CargarItemTipos()
    {
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemTipos");
        if (!respuesta.Error)
        {
            itemTipos = respuesta.Respuesta;
        }
    }

    private string MostrarItemTipos(int itemTiposId)
    {
        var itemTipo = itemTipos?.FirstOrDefault(r => r.Id == itemTiposId);
        return itemTipo?.Nombre ?? "Sin asignar";
    }


    private void TogglePresupuestos(Obra obra)
    {
        if (obraSeleccionada == obra)
        {
            // Si la obra seleccionada es la misma, la ocultamos
            showPresupuestos = !showPresupuestos;
        }
        else
        {
            // Si no es la misma obra, mostramos los presupuestos
            obraSeleccionada = obra;
            showPresupuestos = true;
        }
    }

    private async Task ToggleItems(Presupuesto presupuesto)
    {
        if (presupuestoSeleccionado == presupuesto)
        {
            showItems = !showItems;
        }
        else
        {
            presupuestoSeleccionado = presupuesto;
            showItems = true;
            await LeerItems();  // Cargar los items cuando se selecciona un presupuesto
        }
    }


    private async Task Eliminar(int id)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");

        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Obras/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar la obra: {ex.Message}";
            }
        }

    }

    private async Task EliminarPresupuesto(int presupuestoId)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Presupuestos/{presupuestoId}");
                if (!resp.Error)
                {
                    await LeerPresupuestos(); // Recargar los presupuestos después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }

    private async Task EliminarItem(int itemId)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado)
        {
            try
            {
                var resp2 = await http.Get<List<Avance>>("api/Avances");
                listaAvances = resp2.Respuesta;
                foreach (var itemavance in listaAvances)
                    {
                      if (itemavance.Item_Id == itemId)
                      {
                          var resp3 = await http.Delete($"api/Avances/{itemavance.Id}");
                          if (resp3.Error)
                          {
                             Mensaje = "No se pudo borrar el avance";
                          }
                      }
                    }

                var resp = await http.Delete($"Api/Items/{itemId}");
                if (!resp.Error)
                {
                    await LeerItems();
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }

    private async Task FinalizarObra(int obraId)
    {
        var obra = listaObras.FirstOrDefault(o => o.Id == obraId);
        if (obra == null)
        {
            await js.InvokeVoidAsync("alert", "Obra no encontrada.");
            return;
        }

        if (obra.Finalizada)
        {
            // Si la obra ya está finalizada, solo generar el informe
            var informe = GenerarInformeObra(obra, presupuestos, items);
            await GenerarPDF(informe);
            return;
        }

        // Mostrar confirmación antes de finalizar la obra
        var confirmacion = await js.InvokeAsync<bool>("confirmSwal", "¿Estás seguro de que deseas finalizar esta obra?");
        if (!confirmacion)
        {
            return;
        }

        try
        {
            // Marcar la obra como finalizada
            obra.Finalizada = true;
            obra.FechaFin = DateTime.Now;

            // Crear un DTO para enviar al servidor
            var obraDTO = new EditarObraDTO
                {
                    Id = obra.Id,
                    Nombre = obra.Nombre,
                    FechaInicio = obra.FechaInicio,
                    FechaFin = obra.FechaFin,
                    Imagen = obra.Imagen,
                    Finalizada = obra.Finalizada // Asegúrate de incluir esta propiedad
                };

            var resp = await http.Put($"api/Obras/{obra.Id}", obraDTO);
            if (resp.Error)
            {
                var mensajeError = await resp.ObtenerError(); // Usa ObtenerError() para obtener el mensaje
                await js.InvokeVoidAsync("alert", "Error al marcar la obra como finalizada: " + mensajeError);
                return;
            }

            // Generar el informe
            var informe = GenerarInformeObra(obra, presupuestos, items);
            await GenerarPDF(informe);

            // Recargar la lista de obras
            await Leer();

            await js.InvokeVoidAsync("alert", "Obra finalizada correctamente.");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Ocurrió un error: {ex.Message}");
        }
    }

    private string GenerarInformeObra(Obra obra, List<Presupuesto> presupuestos, List<Item> items)
    {
        var informe = new StringBuilder();

        // Información de la obra
        informe.AppendLine($"Informe de la Obra: {obra.Nombre}");
        informe.AppendLine($"Fecha de Inicio: {obra.FechaInicio.ToShortDateString()}");
        informe.AppendLine($"Fecha de Finalización: {obra.FechaFin.ToShortDateString() ?? "No finalizada"}");
        informe.AppendLine();

        // Información de los presupuestos
        foreach (var presupuesto in presupuestos)
        {
            informe.AppendLine($"Presupuesto: {presupuesto.Nombre}");
            informe.AppendLine($"Fecha Inicio Prevista: {presupuesto.FechaInicioPrevista.ToShortDateString()}");
            informe.AppendLine($"Fecha Fin Prevista: {presupuesto.FechaFinPrevista.ToShortDateString()}");
            informe.AppendLine();

            // Información de los ítems del presupuesto
            var itemsPresupuesto = items.Where(i => i.Presupuesto_Id == presupuesto.Id).ToList();
            if (itemsPresupuesto.Any())
            {
                informe.AppendLine("Ítems:");
                foreach (var item in itemsPresupuesto)
                {
                    informe.AppendLine($"- Tipo: {MostrarItemTipos(item.Item_Tipos_Id)}");
                    informe.AppendLine($"  Tiempo Estimado: {item.Tiempo_estimado} {item.Unidad_Tiempo}");
                    informe.AppendLine($"  Material Estimado: {item.Material_estimado}");
                    informe.AppendLine();
                }
            }
            else
            {
                informe.AppendLine("No hay ítems registrados para este presupuesto.");
            }
            informe.AppendLine();
        }

        return informe.ToString();
    }

    private async Task GenerarPDF(string contenido)
    {
        await js.InvokeVoidAsync("generarPDF", contenido);
    }
}