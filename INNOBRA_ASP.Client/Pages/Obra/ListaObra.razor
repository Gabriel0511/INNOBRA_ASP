@page "/api/Obras"
@inject IHttpServicio http
@inject IJSRuntime js

<h3>Obras</h3>

@if (!string.IsNullOrEmpty(Mensaje))
{
    <div class="alert alert-danger" role="alert">
        @Mensaje
    </div>
}

@if (cargando)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else if (listaObras != null && listaObras.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Nombre</th>
                <th scope="col">Fecha Inicio</th>
                <th scope="col">Fecha Fin</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obra in listaObras)
            {
                <tr>
                    <td>@obra.Nombre</td>
                    <td>@obra.FechaInicio.ToString("yyyy-MM-dd")</td>
                    <td>@obra.FechaFin.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a class="btn btn-warning btn-sm" href="/api/Obras/editar/@obra.Id"><i class="bi bi-pencil"></i></a>
                        <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(obra.Id)"><i class="bi bi-trash3"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning" role="alert">
        No hay obras disponibles.
    </div>
}

<a class="btn btn-primary" href="/api/Obras/crear">
    <i class="bi bi-plus-circle"></i> Crear Obra
</a>

@code {
    List<Obra> listaObras = new List<Obra>();
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar el mensaje de error

            var resp = await http.Get<List<Obra>>("api/Obras");
            if (!resp.Error)
            {
                listaObras = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar las obras: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task Eliminar(int id)
    {
        bool confirmado = await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta obra?");
        if (confirmado)
        {
            try
            {
                var resp = await http.Delete($"api/Obras/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar la obra: {ex.Message}";
            }
        }
    }
}
