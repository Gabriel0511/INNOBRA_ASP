@page "/api/Obras"
@using System.Text
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService
<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div>
<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Obras</h3>
    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">@Mensaje</div>
    }
    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (listaObras != null && listaObras.Any())
    {
        <table class="table-obras">
            <thead>
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Fecha Inicio</th>
                    <th scope="col">Fecha Fin</th>
                    <th scope="col">Imagen</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obra in listaObras)
                {
                    <tr>
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="flex-grow-1">@obra.Nombre</span>
                                <div style="flex-shrink: 0;"></div>
                            </div>
                        </td>
                        <td>@obra.FechaInicio.ToString("dd-MM-yyyy")</td>
                        <td>@obra.FechaFin.ToString("dd-MM-yyyy")</td>
                        <td>
                            @if (obra.Imagen != null && obra.Imagen.Length > 0)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(obra.Imagen)" alt="Imagen de la obra" style="width: 100px; height: auto;"/>
                            }
                            else
                            {
                                <span>No disponible</span>
                            }
                        </td>
                        <td>
                            <a class="btn btn-violet btn-sm" href="/api/Presupuestos/lista/@obra.Id" title="Ver Presupuestos">
                                <i class="bi bi-eye" style="color: black;"></i>
                            </a>
                            <a class="btn btn-warning btn-sm" href="/api/Obras/editar/@obra.Id" title="Editar">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(obra.Id)" title="Eliminar">
                                <i class="bi bi-trash3"></i>
                            </button>
                            <button class="btn btn-success btn-sm" @onclick="() => FinalizarObra(obra.Id)" title="Finalizar Obra">
                                <i class="bi bi-house-check"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br/>
        <a class="btn btn-primary" href="/api/Obras/crear">
            <i class="bi bi-plus-circle"></i> Agregar Obra
        </a>
    }
    else
    {
        <div class="alert alert-warning" role="alert">No hay obras disponibles.</div>
    }
</div>
<style>
    .table-obras td, .table-presupuestos td {word-wrap: break-word; word-break: break-word; white-space: normal; max-width: 150px; overflow: hidden;}
    .table-obras th, .table-presupuestos th {max-width: 150px;}
    .table-obras thead tr th {background-color: #326dc7; color: white;}
    .table-presupuestos thead tr th {background-color: #737544; color: white;}
    .table-items thead tr th {background-color: #3c573c; color: white;}
    .btn-violet {background-color: violet !important; color: white !important; border: none;}
    .btn-violet:hover {background-color: purple !important;}
</style>
<script>
    function generarPDF(contenido) {
        const doc = new jspdf.jsPDF();
        doc.setFont("helvetica", "bold");
        doc.setFontSize(16);
        doc.text("Informe INNOBRA", doc.internal.pageSize.width / 2, 20, { align: "center" });
        const margenIzquierdo = 15;
        let posicionY = 35;
        const anchoMaximo = 180;
        const tamanoFuenteNormal = 12;
        const tamanoFuenteSubtitulo = 12;
        const interlineado = 7;
        const lineas = contenido.split("\n");
        lineas.forEach(linea => {
            if (linea.startsWith("Informe de la Obra:") || linea.startsWith("Presupuesto:") || linea.startsWith("Ítems:")) {
                doc.setFont("helvetica", "bold");
                doc.setFontSize(tamanoFuenteSubtitulo);
            } else {
                doc.setFont("helvetica", "normal");
                doc.setFontSize(tamanoFuenteNormal);
            }
            doc.text(linea, margenIzquierdo, posicionY, { maxWidth: anchoMaximo });
            posicionY += interlineado;
            if (posicionY > doc.internal.pageSize.height - 20) {
                doc.addPage();
                posicionY = 20;
            }
        });
        doc.save("informe.pdf");
    }
</script>
@code {
    List<Obra> listaObras = new();
    List<Presupuesto> presupuestos = new();
    List<Item> items = new();
    List<ItemTipo> itemTipos = new();
    List<Avance> listaAvances = new();
    Obra obraSeleccionada;
    Presupuesto presupuestoSeleccionado;
    bool showPresupuestos;
    bool showItems;
    string Mensaje = "";
    string mensajeError;
    bool cargando = true;
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje)) {
            await Task.Delay(1500);
            mensajeService.Mensaje = string.Empty;
        }
        await CargarItemTipos();
        await Leer();
        await LeerPresupuestos();
    }
    private async Task Leer() {
        try {
            cargando = true;
            Mensaje = "";
            var resp = await http.Get<List<Obra>>("api/Obras");
            if (!resp.Error) {
                listaObras = resp.Respuesta;
            } else {
                Mensaje = await resp.ObtenerError();
            }
        } catch (Exception ex) {
            Mensaje = $"Ocurrió un error al cargar las obras: {ex.Message}";
        } finally {
            cargando = false;
        }
    }
    private async Task LeerPresupuestos() {
        try {
            var resp = await http.Get<List<Presupuesto>>("api/Presupuestos");
            if (!resp.Error) {
                presupuestos = resp.Respuesta;
            } else {
                Mensaje = await resp.ObtenerError();
            }
        } catch (Exception ex) {
            Mensaje = $"Ocurrió un error al cargar los presupuestos: {ex.Message}";
        }
    }
    private async Task LeerItems() {
        try {
            var resp = await http.Get<List<Item>>("Api/Items");
            if (!resp.Error) {
                items = resp.Respuesta;
            } else {
                Mensaje = await resp.ObtenerError();
            }
        } catch (Exception ex) {
            Mensaje = $"Ocurrió un error al cargar los items: {ex.Message}";
        }
    }
    private async Task CargarItemTipos() {
        var respuesta = await http.Get<List<ItemTipo>>("api/ItemTipos");
        if (!respuesta.Error) {
            itemTipos = respuesta.Respuesta;
        }
    }
    private string MostrarItemTipos(int itemTiposId) {
        var itemTipo = itemTipos?.FirstOrDefault(r => r.Id == itemTiposId);
        return itemTipo?.Nombre ?? "Sin asignar";
    }
    private void TogglePresupuestos(Obra obra) {
        if (obraSeleccionada == obra) {
            showPresupuestos = !showPresupuestos;
        } else {
            obraSeleccionada = obra;
            showPresupuestos = true;
        }
    }
    private async Task ToggleItems(Presupuesto presupuesto) {
        if (presupuestoSeleccionado == presupuesto) {
            showItems = !showItems;
        } else {
            presupuestoSeleccionado = presupuesto;
            showItems = true;
            await LeerItems();
        }
    }
    private async Task Eliminar(int id) {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado) {
            try {
                var resp = await http.Delete($"api/Obras/{id}");
                if (!resp.Error) {
                    await Leer();
                } else {
                    Mensaje = await resp.ObtenerError();
                }
            } catch (Exception ex) {
                Mensaje = $"Ocurrió un error al eliminar la obra: {ex.Message}";
            }
        }
    }
    private async Task EliminarPresupuesto(int presupuestoId) {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");
        if (resultado) {
            try {
                var resp = await http.Delete($"api/Presupuestos/{presupuestoId}");
                if (!resp.Error) {
                    await LeerPresupuestos();
                } else {
                    Mensaje = await resp.ObtenerError();
                }
            } catch (Exception ex) {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }
    private async Task FinalizarObra(int idObra) {
        var respuesta = await http.Post($"api/Obras/FinalizarObra/{idObra}", "");
        if (!respuesta.Error) {
            await Leer();
        } else {
            Mensaje = await respuesta.ObtenerError();
        }
    }
}
