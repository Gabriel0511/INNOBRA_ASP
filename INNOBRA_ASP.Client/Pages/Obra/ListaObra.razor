@page "/api/Obras"
@inject IHttpServicio http
@inject IJSRuntime js

<style>
    /* Configura la imagen de fondo para ocupar toda la pantalla */
    .fondo {
        position: fixed; /* Cambia a fixed para mantener el fondo detrás al hacer scroll */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('/images/fondo.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -2; /* Asegura que el fondo esté detrás de todos los elementos */
    }
    /* Capa semitransparente */
    .overlay {
        position: fixed; /* También cambia a fixed para estar alineado con el fondo */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: -1; /* Debe estar detrás del contenedor principal */
    }
    /* Contenedor principal */
    .contenedor {
        position: relative;
        z-index: 1; /* Por encima de fondo y overlay */
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 15px;
        padding: 20px;
        max-width: 800px;
        margin: auto;
        color: black;
        margin-top: 20px;
    }
    /* Estilo de la tabla */
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
    }

    th {
        background-color: #007bff;
        color: white;
    }

    .btn-primary, .btn-danger {
        border: none;
        border-radius: 5px;
        padding: 8px 12px;
        color: white;
        text-decoration: none;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-danger {
        background-color: #dc3545;
    }
</style>

<div class="fondo"></div>
    <div class="contenido"></div>
        <h3>Obras</h3>

        @if (!string.IsNullOrEmpty(Mensaje))
        {
            <div class="alert alert-danger" role="alert">
                @Mensaje
            </div>
        }

        @if (cargando)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        }
        else if (listaObras != null && listaObras.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Fecha Inicio</th>
                        <th scope="col">Fecha Fin</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var obra in listaObras)
                    {
                        <tr>
                            <td>@obra.Nombre</td>
                            <td>@obra.FechaInicio.ToString("dd-MM-yyyy")</td>
                            <td>@obra.FechaFin.ToString("dd-MM-yyyy")</td>
                            <td>
                                <a class="btn btn-warning btn-sm" href="/api/Obras/editar/@obra.Id"><i class="bi bi-pencil"></i></a>
                                <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(obra.Id)"><i class="bi bi-trash3"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                No hay obras disponibles.
            </div>
        }

        <a class="btn btn-primary" href="/api/Obras/crear">
            <i class="bi bi-building-fill-add"></i> Crear Obra
        </a>

@code {
    List<Obra> listaObras = new List<Obra>();
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar el mensaje de error

            var resp = await http.Get<List<Obra>>("api/Obras");
            if (!resp.Error)
            {
                listaObras = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar las obras: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task Eliminar(int id)
    {
        bool confirmado = await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta obra?");
        if (confirmado)
        {
            try
            {
                var resp = await http.Delete($"api/Obras/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar la obra: {ex.Message}";
            }
        }
    }
}
