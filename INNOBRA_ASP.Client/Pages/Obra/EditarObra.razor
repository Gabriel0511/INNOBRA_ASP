@page "/Api/Obras/editar/{id:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService
@using Microsoft.AspNetCore.Components.Forms

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Obra</h3>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-success">
            @mensaje
        </div>
    }

    <EditForm Model="@obra" OnValidSubmit="Actualizar">
        <DataAnnotationsValidator />

        <div class="form-group">

            <div style="display:flex">
                <label>Nombre:</label>
                <InputText class="form-control" style="max-width: 35%; max-height: 2.2rem; margin-left:0.5rem " @bind-Value="@obra.Nombre" />
            </div>
            <div>
                <ValidationMessage For="@(() => obra.Nombre)" />
            </div>
        </div>

        <div class="mb-3" style="display:flex">
            <label>Fecha Inicio</label>
            <InputDate class="form-control" style="max-width: 35%; max-height: 2.2rem; margin-left:0.5rem " @bind-Value="obra.FechaInicio" />
            <ValidationMessage For="@(() => obra.FechaInicio)" />
        </div>

        <div class="mb-3" style="display:flex">
            <label>Fecha fin</label>
            <InputDate class="form-control" style="max-width: 35%; max-height: 2.2rem; margin-left:0.5rem " @bind-Value="obra.FechaFin" />
            <ValidationMessage For="@(() => obra.FechaFin)" />
        </div>

        <div class="mb-3" style="display:flex; align-items: center;">
            <label>Imagen:</label>
            <InputFile class="form-control" style="max-width: 65%; max-height: 3rem; margin-left:0.5rem "  OnChange="OnInputFileChange" />
            @if (obra.Imagen != null)
            {
                <img src="data:image;base64,@Convert.ToBase64String(obra.Imagen)" alt="Imagen actual" style="width: 200px; height: auto; margin-top: 10px;" />
            }
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    [Parameter] public int id { get; set; }
    private EditarObraDTO obra = new EditarObraDTO();
    private string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarObra();
    }

    private async Task CargarObra()
    {
        var respuesta = await http.Get<EditarObraDTO>($"Api/Obras/GetById/{id}");
        if (!respuesta.Error)
        {
            obra = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("/api/Obras");
        }
    }

    private async Task Actualizar()
    {
        var respuesta = await http.Put($"Api/obras/{id}", obra);

        if (!respuesta.Error)
        {
            // Actualizamos el mensaje globalmente a través del servicio
            mensajeService.Mensaje = "Se actualizó con éxito la obra.";

            // Forzamos el renderizado (opcional, pero puede ser útil)
            StateHasChanged();

            // Redirigimos a la página de lista de unidades
            await Task.Delay(1500); // Espera para mostrar el mensaje
            nav.NavigateTo("/api/Obras");
        }
        else
        {
            var errorContent = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        using (var stream = new MemoryStream())
        {
            await imageFile.OpenReadStream().CopyToAsync(stream);
            obra.Imagen = stream.ToArray(); // Asigna la imagen a obra.Imagen
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}
