@page "/api/Avances/editar/{idObra:int}/{idPresupuesto:int}/{idItem:int}/{idAvance:int}"
@inject IHttpServicio http
@inject NavigationManager nav
@inject MensajeService mensajeService
@using INNOBRA_ASP.Shared.DTO

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Avance</h3>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger" role="alert">
            @mensajeError
        </div>
    }

    <EditForm Model="avance" OnValidSubmit="Actualizar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Fecha de Finalización Prevista:</label>
            <InputDate @bind-Value="avance.Fecha" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Fecha de Finalización Real:</label>
            <InputDate @bind-Value="avance.FechaFinalizacionReal" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Recurso:</label>
            <select @bind="avance.Recurso_Id" class="form-control">
                <option value="">Seleccione un recurso</option>
                @foreach (var recurso in listaRecursos)
                {
                    <option value="@recurso.Id">@recurso.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => avance.Recurso_Id)" />
        </div>

        <div class="mb-3">
            <label>Material Empleado: (número)</label>
            <InputText @bind-Value="avance.MaterialEjecutado" class="form-control" />
            <ValidationMessage For="@(() => avance.MaterialEjecutado)" />
        </div>

        <button type="submit" class="btn btn-primary">Aceptar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    [Parameter] public int idAvance { get; set; }
    [Parameter] public int idObra { get; set; }
    [Parameter] public int idPresupuesto { get; set; }
    [Parameter] public int idItem { get; set; }

    private EditarAvanceDTO avance = new EditarAvanceDTO();
    private List<Recurso> listaRecursos = new();
    private string mensajeError;

    protected override async Task OnInitializedAsync()
    {
        avance.FechaFinalizacionReal = DateTime.Today;
        avance.Fecha = DateTime.Today;
        await base.OnInitializedAsync();
        await Mostrar();
        await CargarRecursos();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<EditarAvanceDTO>($"api/Avances/GetById/{idAvance}");
        if (!respuesta.Error)
        {
            avance = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("api/Obras");
        }
    }

    private async Task CargarRecursos()
    {
        var respuesta = await http.Get<List<Recurso>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }
    }

    private async Task Actualizar()
    {
        if (!ValidarFormulario())
        {
            return;
        }

        // Obtener el avance original para comparar el material ejecutado
        var avanceOriginal = await http.Get<EditarAvanceDTO>($"api/Avances/GetById/{idAvance}");
        if (avanceOriginal.Error)
        {
            mensajeError = "Error al obtener el avance original.";
            return;
        }

        // Calcular la diferencia en el material ejecutado
        if (decimal.TryParse(avanceOriginal.Respuesta.MaterialEjecutado, out decimal materialOriginal) &&
            decimal.TryParse(avance.MaterialEjecutado, out decimal materialNuevo))
        {
            decimal diferenciaMaterial = materialNuevo - materialOriginal;

            // Obtener el recurso correspondiente
            var recurso = listaRecursos.FirstOrDefault(r => r.Id == avance.Recurso_Id);
            if (recurso != null)
            {
                // Validar que el campo Cantidad sea un número válido
                if (decimal.TryParse(recurso.Cantidad, out decimal cantidadActual))
                {
                    // Ajustar la cantidad de material en el recurso
                    cantidadActual -= diferenciaMaterial;

                    // Convertir el resultado de vuelta a string
                    recurso.Cantidad = cantidadActual.ToString();

                    // Actualizar el recurso en la base de datos
                    var respuestaActualizacion = await http.Put<Recurso>($"api/Recursos/{recurso.Id}", recurso);
                    if (respuestaActualizacion.Error)
                    {
                        mensajeError = "Error al actualizar el recurso.";
                        return;
                    }
                }
                else
                {
                    mensajeError = "El valor de Cantidad en el recurso no es un número válido.";
                    return;
                }
            }
        }
        else
        {
            mensajeError = "El valor de Material Ejecutado no es un número válido.";
            return;
        }

        // Actualizar el avance
        var httpRespuesta = await http.Put<EditarAvanceDTO>($"api/Avances/{idAvance}", avance);
        if (!httpRespuesta.Error)
        {
            mensajeService.Mensaje = "Se actualizó con éxito el avance.";
            await Task.Delay(1500);
            nav.NavigateTo($"/api/Avances/{idObra}/{idPresupuesto}/{idItem}");
        }
        else
        {
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private bool ValidarFormulario()
    {
        mensajeError = "";

        if (avance.Recurso_Id == null || avance.Recurso_Id == 0)
        {
            mensajeError += "Debe seleccionar un recurso.\n";
        }

        if (string.IsNullOrWhiteSpace(avance.MaterialEjecutado))
        {
            mensajeError += "Debe ingresar un material ejecutado.\n";
        }
        else if (!decimal.TryParse(avance.MaterialEjecutado, out decimal materialEjecutado) || materialEjecutado <= 0)
        {
            mensajeError += "El material ejecutado debe ser un número mayor que 0.\n";
        }

        if (!string.IsNullOrEmpty(mensajeError))
        {
            return false;
        }

        return true;
    }

    private void Cancelar()
    {
        nav.NavigateTo($"/api/Avances/{idObra}/{idPresupuesto}/{idItem}");
    }
}