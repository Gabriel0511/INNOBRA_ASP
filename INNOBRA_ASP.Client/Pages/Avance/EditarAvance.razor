@page "/api/Avances/editar/{avanceId:int}"
@inject IHttpServicio http
@inject NavigationManager nav
@inject MensajeService mensajeService
@using INNOBRA_ASP.Shared.DTO

<style>
    .fondo {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('/images/fondo.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -2;
    }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: -1;
    }

    .contenedor {
        position: relative;
        z-index: 1;
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 15px;
        padding: 20px;
        max-width: 800px;
        margin: auto;
        color: black;
        margin-top: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
    }

    th {
        background-color: #007bff;
        color: white;
    }

    .btn-primary, .btn-danger {
        border: none;
        border-radius: 5px;
        padding: 8px 12px;
        color: white;
        text-decoration: none;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-danger {
        background-color: #dc3545;
    }
</style>

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Avance</h3>

    <EditForm Model="avance" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Fecha</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.Fecha" />
                <ValidationMessage For="@(() => avance.Fecha)" />
            </div>
        </div>

        <div class="form-group">
            <label>Material Ejecutado</label>
            <div>
                <InputText class="form-control" @bind-Value="@avance.MaterialEjecutado" />
                <ValidationMessage For="@(() => avance.MaterialEjecutado)" />
            </div>
        </div>

        <div class="form-group">
            <label>Fecha de Finalizacion Real</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.FechaFinalizacionReal" />
                <ValidationMessage For="@(() => avance.FechaFinalizacionReal)" />
            </div>
        </div>

        <div class="form-group">
            <label>Item ID:</label>
            <InputNumber class="form-control" @bind-Value="avance.Item_Id" />
        </div>

        <div class="form-group">
            <label>Recurso:</label>
            <select class="form-control" @bind="avance.Recurso_Id">
                <option value="">Seleccione un recurso</option>
                @foreach (var recurso in listaRecursos)
                {
                    <option value="@recurso.Id">@recurso.Nombre</option>
                }
            </select>
        </div>

        <br />
        <div class="text-center">
            <button class="btn btn-primary" type="submit">Aceptar</button>
            <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int avanceId { get; set; }
    private EditarAvanceDTO avance = new EditarAvanceDTO();
    private List<Recurso> listaRecursos = new();

    protected override async Task OnInitializedAsync()
    {
        avance.FechaFinalizacionReal = DateTime.Today;
        await base.OnInitializedAsync();
        await Mostrar();
        await CargarRecursos();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<EditarAvanceDTO>($"api/Avances/GetById/{avanceId}");
        if (!respuesta.Error)
        {
            avance = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("/api/Avances");
        }
    }

    private async Task CargarRecursos()
    {
        var respuesta = await http.Get<List<Recurso>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }

    }

    private async Task Grabar()
    {
        var httpRespuesta = await http.Put<EditarAvanceDTO>($"api/Avances/{avanceId}", avance);
        
        if (httpRespuesta.Error)
        {
            // Actualizamos el mensaje globalmente a través del servicio
            mensajeService.Mensaje = "Se actualizó con éxito el avance.";

            // Forzamos el renderizado (opcional, pero puede ser útil)
            StateHasChanged();

            // Redirigimos a la página de lista de
            await Task.Delay(500); // Espera para mostrar el mensaje
            nav.NavigateTo("/api/Avances");
        }
        else
        {
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
        
        // if (httpRespuesta.Error)
        // {
        //     var body = httpRespuesta.HttpResponseMessage;
        // }
        //nav.NavigateTo("/api/Avances");
       
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Avances");
    }
}
