@page "/api/Avances/editar/{avanceId:int}"
@inject IHttpServicio http
@inject NavigationManager nav
@using INNOBRA_ASP.Shared.DTO

<div class="fondo"></div> <!-- Fondo que cubre toda la pantalla -->
<div class="overlay"></div> <!-- Capa semitransparente -->
<div class="contenedor-formulario">
    <h3>Editar Avance</h3>

    <EditForm Model="avance" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Fecha</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.Fecha" />
                <ValidationMessage For="@(() => avance.Fecha)" />
            </div>
        </div>

        <div class="form-group">
            <label>Material Ejecutado</label>
            <div>
                <InputText class="form-control" @bind-Value="@avance.MaterialEjecutado" />
                <ValidationMessage For="@(() => avance.MaterialEjecutado)" />
            </div>
        </div>

        <div class="form-group">
            <label>Fecha de Finalizacion Real</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.FechaFinalizacionReal" />
                <ValidationMessage For="@(() => avance.FechaFinalizacionReal)" />
            </div>
        </div>

        <div class="form-group">
            <label>Item ID:</label>
            <InputNumber class="form-control" @bind-Value="avance.Item_Id" />
        </div>

        <div class="form-group">
            <label>Recurso ID:</label>
            <InputNumber class="form-control" @bind-Value="avance.Recurso_Id" />
        </div>

        <br />
        <div class="text-center">
            <button class="btn btn-primary" type="submit">Aceptar</button>
            <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int avanceId { get; set; }
    private EditarAvanceDTO avance = new EditarAvanceDTO();

    protected override async Task OnInitializedAsync()
    {
        avance.FechaFinalizacionReal = DateTime.Today;
        await base.OnInitializedAsync();
        await Mostrar();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<EditarAvanceDTO>($"api/Avances/GetById/{avanceId}");
        if (!respuesta.Error)
        {
            avance = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("/api/Avances");
        }
    }

    private async Task Grabar()
    {
        var httpRespuesta = await http.Put<EditarAvanceDTO>($"api/Avances/{avanceId}", avance);
        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
        nav.NavigateTo("/api/Avances");
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Avances");
    }
}