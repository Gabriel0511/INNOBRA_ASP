@page "/api/Avances/editar/{idObra:int}/{idPresupuesto:int}/{idItem:int}/{idAvance:int}"
@inject IHttpServicio http
@inject NavigationManager nav
@inject MensajeService mensajeService
@using INNOBRA_ASP.Shared.DTO

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Avance</h3>

    <EditForm Model="avance" OnValidSubmit="Actualizar">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label>Fecha de Finalizacion Prevista</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.Fecha" />
                <ValidationMessage For="@(() => avance.Fecha)" />
            </div>
        </div>

        <div class="mb-3">
            <label>Fecha de Finalizacion Real</label>
            <div>
                <InputDate class="form-control" @bind-Value="@avance.FechaFinalizacionReal" />
                <ValidationMessage For="@(() => avance.FechaFinalizacionReal)" />
            </div>
        </div>

        <div class="mb-3">
            <label>Recurso:</label>
            <select @bind="avance.Recurso_Id" class="form-control">
                <option value="">Seleccione un recurso</option>
                @foreach (var recurso in listaRecursos)
                {
                    <option value="@recurso.Id">@recurso.Nombre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Material Empleado</label>
            <div>
                <InputText class="form-control" @bind-Value="@avance.MaterialEjecutado" />
                <ValidationMessage For="@(() => avance.MaterialEjecutado)" />
            </div>
        </div>

            <button class="btn btn-primary" type="submit">Aceptar</button>
            <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    [Parameter] public int idAvance { get; set; }
    [Parameter] public int idObra { get; set; }
    [Parameter] public int idPresupuesto { get; set; }
    [Parameter] public int idItem { get; set; }

    private EditarAvanceDTO avance = new EditarAvanceDTO();
    private List<Recurso> listaRecursos = new();

    protected override async Task OnInitializedAsync()
    {
        avance.FechaFinalizacionReal = DateTime.Today;
        avance.Fecha = DateTime.Today;
        await base.OnInitializedAsync();
        await Mostrar();
        await CargarRecursos();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<EditarAvanceDTO>($"api/Avances/GetById/{idAvance}");
        if (!respuesta.Error)
        {
            avance = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("api/Obras");
        }
    }

    private async Task CargarRecursos()
    {
        var respuesta = await http.Get<List<Recurso>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }

    }

    private async Task Actualizar()
    {
        if (!ValidarFormulario())
        {
            return;
        }

        var httpRespuesta = await http.Put<EditarAvanceDTO>($"api/Avances/{idAvance}", avance);

        if (!httpRespuesta.Error)
        {
            mensajeService.Mensaje = "Se actualizó con éxito el avance.";
            StateHasChanged();
            nav.NavigateTo($"/api/Avances/{idObra}/{idPresupuesto}/{idItem}");
        }
        else
        {
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private bool ValidarFormulario()
    {
        mensajeService.Mensaje = ""; // Limpiar mensajes anteriores

        if (avance.Recurso_Id == null || avance.Recurso_Id == 0)
        {
            mensajeService.Mensaje += "Debe seleccionar un recurso.\n";
        }

        if (string.IsNullOrWhiteSpace(avance.MaterialEjecutado))
        {
            mensajeService.Mensaje += "Debe ingresar un material ejecutado.\n";
        }

        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            return false;
        }

        return true;
    }



    private void Cancelar()
    {
        nav.NavigateTo($"/api/Avances/{idObra}/{idPresupuesto}/{idItem}");
    }
}
