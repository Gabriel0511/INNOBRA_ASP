@page "/api/Avances/{id:int}"
@inject IHttpServicio http
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">

    <h3>Lista de Avances</h3>
    
    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            @Mensaje
        </div>
    }
    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (listaAvances != null && listaAvances.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Material Ejecutado</th>
                    <th>Fecha de Finalización Real</th>
                    <th>Item Id</th>
                    <th>Recurso Id</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in listaAvances)
                {
                    <tr>
                        <td>@item.Fecha</td>
                        <td>@item.MaterialEjecutado</td>
                        <td>@item.FechaFinalizacionReal</td>
                        <td>@item.Item_Id</td>
                        <td>@item.Recurso_Id</td>

                        <td>
                            <a class="btn btn-warning btn-sm" href="api/Avances/editar/@item.Id"><i class="bi bi-pencil"></i></a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item)"><i class="bi bi-trash3"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay avances registrados.
        </div>
    }

    <br />

    <a class="btn btn-success btn-sm" href="/api/Avances/crear/@item.Id">
        <i class="bi bi-plus-circle"></i> Agregar Avance
    </a>

</div>

    @*<a class="btn btn-primary" href="/api/Avances/crear">Nuevo Avance</a>
    <table>
        <tr>
            <th>Fecha</th>
            <th>Material Ejecutado</th>
            <th>Fecha de Finalización Real</th>
            <th>Item Id</th>
            <th>Recurso Id</th>
            <th>Acciones</th>
        </tr>
        @if (Mensaje == "")
        {
            @if (listaAvances == null)
            {
                <p>Buscando....</p>
            }
            else if (listaAvances.Count == 0)
            {
                <p>No existen avances</p>
            }
            else
            {
                @foreach (var item in listaAvances)
                {
                    <tr>
                        <td>@item.Fecha</td>
                        <td>@item.MaterialEjecutado</td>
                        <td>@item.FechaFinalizacionReal</td>
                        <td>@item.Item_Id</td>
                        <td>@item.Recurso_Id</td>
                        <td>
                            <a class="btn btn-primary" href="api/Avances/editar/@item.Id">Editar</a>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => Eliminar(item)">Borrar</button>
                        </td>
                    </tr>
                }
            }
        }
        else
        {
            <p>Error: @Mensaje</p>
        }
    </table> 


<Confirmacion @ref="confirmacion" Titulo="CUIDADO" textCancelar="Salir" onCancel="Cancelar" onConfirm="Borrar">
    <h5>Está por borrar el avance</h5>
    <br />
    <p>Está seguro?</p>
</Confirmacion>*@

@code {
    [Parameter] public int id { get; set; }
    Confirmacion confirmacion;
    List<Avance> listaAvances;
    Avance avance;
    string Mensaje = "";
    bool cargando = true;
    Avance? avanceBorrar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Avance>>($"api/Avances/GetById/{id}");
        if (!resp.Error)
        {
            listaAvances = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
        cargando = false;
    }

    private async Task Eliminar(Avance avance)
    {
        avanceBorrar = avance;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        avanceBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Avances/{avanceBorrar.Id}");
        if (respuesta.Error)
        {
            var body = "No se pudo borrar";
        }
        Cancelar();
        await Leer();
    }
}