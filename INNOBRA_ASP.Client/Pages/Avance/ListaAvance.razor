@page "/api/Avances/{idObra:int}/{idPresupuesto:int}/{idItem:int}"
@inject IHttpServicio http
@inject HttpClient Http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">

    <h3>Lista de Avances</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            @Mensaje
        </div>
    }
    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (listaAvances != null && listaAvances.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Fecha de Finalización Prevista</th>
                    <th>Fecha de Finalización Real</th>
                    <th>Recurso</th>
                    <th>Material Ejecutado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var avances in listaAvances.Where(predicate => predicate.Item_Id == idItem))
                {
                    <tr>
                        <td>@avances.Fecha.ToString("dd-MM-yyyy")</td>
                        <td>@avances.FechaFinalizacionReal.ToString("dd-MM-yyyy")</td>
                        <td>@MostrarRecurso(avances.Recurso_Id)</td>
                        <td>@avances.MaterialEjecutado</td>

                        <td>
                            <a class="btn btn-warning btn-sm" href="api/Avances/editar/@idObra/@idPresupuesto/@idItem/@avances.Id"><i class="bi bi-pencil"></i></a>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(avances.Id)"><i class="bi bi-trash3"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No hay avances registrados para este item.
        </div>
    }

    <br />

     <a class="btn btn-primary" href="/api/Avances/crear/@idItem">
        <i class="bi bi-plus-circle"></i> Agregar Avance
    </a> 


</div>

@code {
    [Parameter] public int idObra { get; set; }
    [Parameter] public int idPresupuesto { get; set; }
    [Parameter] public int idItem { get; set; }

    Confirmacion confirmacion;
    List<Avance> listaAvances;
    List<Recurso> listaRecursos = new List<Recurso>();
    Avance avance;
    string Mensaje = "";
    bool cargando = true;
    Avance? avanceBorrar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
        await CargarRecurso();
    }

    private async Task Leer()
    {
        var avances = await Http.GetFromJsonAsync<List<Avance>>($"api/Avances");
        if (avances != null)
        {
            listaAvances = avances.Where(a => a.Item_Id == idItem).ToList();
        }
        else
        {
            Mensaje = "Error al cargar avances";
        }
        cargando = false;
    }

    private async Task CargarRecurso()
    {
        var respuesta = await http.Get<List<Recurso>>("/api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }
    }

    private string MostrarRecurso(int recursoId)
    {
        var recurso = listaRecursos?.FirstOrDefault(r => r.Id == recursoId);
        return recurso?.Nombre ?? "Sin asignar";
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        avanceBorrar = null;
    }

    private async Task Eliminar(int idAvance)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");

        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Avances/{idAvance}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el avance: {ex.Message}";
            }
        }

    }
}