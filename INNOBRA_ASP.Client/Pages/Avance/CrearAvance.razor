@page "/api/Avances/crear"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Gestión de Avances</h3>

    <!-- Formulario para Crear/Editar Avance -->
    <EditForm Model="@avance" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Fecha:</label>
            <InputDate @bind-Value="avance.Fecha" class="form-control" />
        </div>

        <div>
            <label>Material Ejecutado: (numero)</label>
            <InputText @bind-Value="avance.MaterialEjecutado" class="form-control" />
        </div>

        <!-- Selección de Item ID -->
        <div>
            <label>Item ID:</label>
            <InputNumber @bind-Value="avance.Item_Id" class="form-control" />
        </div>

        <!-- Selección del Recurso por Nombre -->
        <div>
            <label>Recurso:</label>
            <select @bind="avance.Recurso_Id" class="form-control">
                <option value="">Seleccione un recurso</option>
                @foreach (var recurso in listaRecursos)
                {
                    <option value="@recurso.Id">@recurso.Nombre</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    private CrearAvanceDTO avance = new CrearAvanceDTO();
    private List<Recurso> listaRecursos = new(); // Lista para almacenar recursos

    protected override async Task OnInitializedAsync()
    {
        avance.Fecha = DateTime.Today;
        await CargarRecursos();
    }

    private async Task CargarRecursos()
    {
        // Llama al servicio para obtener la lista de recursos
        var respuesta = await http.Get<List<Recurso>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        var httpRespuesta = await http.Post<CrearAvanceDTO>("api/Avances", avance);
        if (!httpRespuesta.Error)
        {
            // Si el avance se crea correctamente, establecer el mensaje
            mensajeService.Mensaje = "Avance agregado con éxito.";

            // Redirigir a la página de lista después de un breve retraso
            await Task.Delay(1500);
            nav.NavigateTo("/api/Obras");
        }
        else
        {
            // Si ocurre un error, establecer el mensaje de error
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
        
        // var httpRespuesta = await http.Post<CrearAvanceDTO>("api/Avances", avance);
        // if (httpRespuesta.Error)
        // {
        //     var body = httpRespuesta.HttpResponseMessage;
        // }
        // nav.NavigateTo("/api/Avances");
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}
