@page "/api/Recursos"
@inject IHttpServicio http
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div>

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Lista de Recursos</h3>
    <br />
    <a class="btn btn-primary" href="/api/Recursos/crear">Nuevo Recurso</a>
    <br /><br />
    <table class="table">
        <thead>
            <tr>
                <th>Tipo</th>
                <th>Nombre</th>
                <th>Cantidad</th>
                <th>Unidad de Medida</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (string.IsNullOrEmpty(Mensaje))
            {
                @if (listaRecursos == null)
                {
                    <tr><td colspan="5">Buscando....</td></tr>
                }
                else if (listaRecursos.Count == 0)
                {
                    <tr><td colspan="5">No existen recursos</td></tr>
                }
                else
                {
                    @foreach (var item in listaRecursos)
                    {
                        <tr>
                            <td>@item.Tipo</td>
                            <td>@item.Nombre</td>
                            <td>@item.Cantidad</td>
                            <td>
                                @if (unitNames.TryGetValue(item.Unidad_Id, out var unidadNombre))
                                {
                                    @unidadNombre
                                }
                                else
                                {
                                    <span>Unidad no disponible</span>
                                }
                            </td>
                            <td>
                                <a class="btn btn-primary" href="api/Recursos/editar/@item.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="() => Eliminar(item)">Borrar</button>
                            </td>
                        </tr>
                    }
                }
            }
            else
            {
                <tr><td colspan="5">Error: @Mensaje</td></tr>
            }
        </tbody>
    </table>
</div>

<Confirmacion @ref="confirmacion" Titulo="CUIDADO" textCancelar="Salir" onCancel="Cancelar" onConfirm="Borrar">
    <h5>Está por borrar el recurso</h5>
    <br />
    <p>Está seguro?</p>
</Confirmacion>

@code {
    Confirmacion confirmacion;
    List<Recurso> listaRecursos;
    Recurso recurso;
    string Mensaje = "";
    Recurso? recursoBorrar = null;

    // Diccionario para almacenar los nombres de unidades basados en el ID
    private Dictionary<int, string> unitNames = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Borra el mensaje después de 3 segundos
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);
            mensajeService.Mensaje = string.Empty;
        }

        // Cargar recursos e unidades
        await Leer();
    }

    private async Task Leer()
    {
        // Llamada para obtener la lista de recursos
        var resp = await http.Get<List<Recurso>>("api/Recursos");

        if (!resp.Error)
        {
            listaRecursos = resp.Respuesta;

            // Una vez que tenemos los recursos, cargamos los nombres de las unidades
            await CargarNombresUnidades();
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task CargarNombresUnidades()
    {
        // Obtenemos los IDs de las unidades asociadas a los recursos
        var unidadIds = listaRecursos.Select(r => r.Unidad_Id).Distinct().ToList();

        foreach (var unidadId in unidadIds)
        {
            var respuestaUnidad = await http.Get<Unidad>($"api/Unidades/GetById/{unidadId}");
            if (!respuestaUnidad.Error)
            {
                var unidad = respuestaUnidad.Respuesta;
                unitNames[unidadId] = unidad.Nombre;  // Guardamos el nombre de la unidad en el diccionario
            }
        }
    }

    private async Task Eliminar(Recurso recurso)
    {
        recursoBorrar = recurso;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        recursoBorrar = null;
    }

    private async Task Borrar()
    {
        if (recursoBorrar != null)
        {
            var respuesta = await http.Delete($"api/Recursos/{recursoBorrar.Id}");
            if (respuesta.Error)
            {
                Mensaje = "No se pudo borrar el recurso.";
            }
            else
            {
                // Recargar los recursos después de eliminar
                await Leer();
            }
        }

        Cancelar();
    }
}
