@page "/api/Recursos/crear"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Gestión de Recursos</h3>

    <!-- Formulario para Crear/Editar Recurso -->
    <EditForm Model="@recurso" OnValidSubmit="() => Grabar()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Nombre:</label>
            <InputText @bind-Value="recurso.Nombre" class="form-control" />
        </div>

        <div>
            <label>Cantidad:</label>
            <InputText @bind-Value="recurso.Cantidad" class="form-control" />
        </div>

        <div>
            <div class="mb-3">
        <label>Unidad de Medida:</label>
        <div>
            <select class="form-control" @bind="recurso.UnidadMedida">
                <option value="">Seleccione la unidad de medida</option>
                        @foreach (var listundMedida in listundMedida)
                        {
                            <option value="@listundMedida">@listundMedida</option>
                        }
            </select>
            <ValidationMessage For="@(() => recurso.UnidadMedida)" />
        </div>
    </div>
        </div>

        <div>
            <label>Tipo de Recurso:</label>
            <InputSelect @bind-Value="recurso.Tipo" class="form-control">
                @foreach (var tipo in Enum.GetValues(typeof(CrearRecursoDTO.TipoRecursoDTO)))
                {
                    <option value="@tipo">@tipo</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Unidad de Medida:</label>
            <InputSelect @bind-Value="recurso.Unidad_Id" class="form-control">
                @foreach (var unidad in listaUnidad)
                {
                    <option value="@unidad.Id">@unidad.Nombre</option>
                }
            </InputSelect>
        </div>


        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    private CrearRecursoDTO recurso = new CrearRecursoDTO();
    private CrearUnidadDTO unidad = new CrearUnidadDTO();
    private List<Unidad> listaUnidad = new List<Unidad>();
    private List<Avance> listaRecursos = new();
    private List<Unidad> listaUnidades = new();
    private List<string> listundMedida = new List<string> { "Centimetros", "Milimetros", "Kilometros", "MetrosCuadrados", 
            "CentimetrosCuadrados", "KilometrosCuadrados", "MetrosCubicos", "CentimetrosCubicos", "Kg", "Obreros", 
            "Metros", "Litros", "Toneladas", "Unidades" };

    protected override async Task OnInitializedAsync()
    {
        await CargarRecursos();
    }

    private async Task CargarRecursos()
    {
        var respuesta = await http.Get<List<Avance>>("api/Recursos");
        if (!respuesta.Error)
        {
            listaRecursos = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        if (recurso != null)
        {
            // Llamada al método Post para enviar el recurso
            var respuesta = await http.Post<CrearRecursoDTO>("api/Recursos", recurso);

            if (!respuesta.Error)
            {
                mensajeService.Mensaje = "Recurso agregado con éxito.";
                await Task.Delay(1500);
                nav.NavigateTo("/api/Recursos");
            }
            else
            {
                var errorContent = await respuesta.ObtenerError();
                mensajeService.Mensaje = $"Error: {errorContent}";
            }
        }
        else
        {
            mensajeService.Mensaje = "Error: Entidad desconocida.";
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}
