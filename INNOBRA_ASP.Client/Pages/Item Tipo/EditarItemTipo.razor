@page "/api/ItemTipos/editar/{id:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Item Tipo</h3>

    <!-- Formulario para Editar ItemTipo -->
    <EditForm Model="@itemTipo" OnValidSubmit="Actualizar">
        <DataAnnotationsValidator />


        <div>
            <label>Código:</label>
            <InputText class="form-control" @bind-Value="itemTipo.Codigo" />
            <ValidationMessage For="@(() => itemTipo.Codigo)" />
        </div>

        <div>
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="itemTipo.Nombre" />
            <ValidationMessage For="@(() => itemTipo.Nombre)" />
        </div>

        <div>
            <label>Unidad:</label>
            <input type="text" class="form-control" value="@unidad.Nombre" readonly />
            <ValidationMessage For="@(() => unidad.Nombre)" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>

</div>

@code {
    [Parameter] public int id { get; set; } // ID del ItemTipo a editar
    private CrearItemTipoDTO itemTipo = new CrearItemTipoDTO();

    private Unidad unidad = new Unidad();

    protected override async Task OnInitializedAsync()
    {
        await CargarItemTipo();

        await CaragrUnidadNombre();

    }

    private async Task CargarItemTipo()
    {
        // Carga el ItemTipo existente usando su ID
        var respuesta = await http.Get<CrearItemTipoDTO>($"api/ItemTipos/{id}");
        if (!respuesta.Error)
        {
            itemTipo = respuesta.Respuesta;
        }
        else
        {
            // Manejo del error en caso de fallo en la carga
            nav.NavigateTo("/api/Obras");
        }
    }

    private async Task CaragrUnidadNombre()
    {
        var respuesta = await http.Get<Unidad>($"api/Unidades/GetById/{itemTipo.Unidad_Id}");
        if (!respuesta.Error)
        {
            unidad = respuesta.Respuesta;

        }
        else
        {
            
        }
    }
    private async Task Actualizar()
    {
       var respuesta = await http.Put($"api/ItemTipos/{id}", itemTipo);

        if (!respuesta.Error)
        {
            // Actualizamos el mensaje globalmente a través del servicio
            mensajeService.Mensaje = "Se actualizó con éxito el item tipo.";

            // Forzamos el renderizado (opcional, pero puede ser útil)
            StateHasChanged();

            // Redirigimos a la página de lista de
            await Task.Delay(500); // Espera para mostrar el mensaje
            nav.NavigateTo("/api/Obras");
        }
        else
        {
            var errorContent = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
        
  
        // if (!respuesta.Error)
        // {
        //     nav.NavigateTo("/api/ItemTipos");
        // }
        // else
        // {
        //     // Manejo de error en caso de fallo en la actualización
        // }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}
