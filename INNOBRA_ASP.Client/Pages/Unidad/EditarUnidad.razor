@page "/Api/Unidades/editar/{id:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService
@using Microsoft.AspNetCore.Components.Forms

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Editar Unidad</h3>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-success">
            @mensaje
        </div>
    }

    <EditForm Model="@unidad" OnValidSubmit="Actualizar">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label>Nombre:</label>
            <InputText @bind-Value="unidad.Nombre" />
            <ValidationMessage For="@(() => unidad.Nombre)" />
        </div>

        <div class="mb-3">
            <label>Descripcion:</label>
            <InputText @bind-Value="unidad.Descripcion" />
            <ValidationMessage For="@(() => unidad.Descripcion)" />
        </div>

        <div class="mb-3">
            <label>Costo:</label>
            <InputNumber @bind-Value="unidad.Costo" />
            <ValidationMessage For="@(() => unidad.Costo)" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    [Parameter] public int id { get; set; }
    private EditarUnidadDTO unidad = new EditarUnidadDTO();
    private string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarUnidad();
    }

    private async Task CargarUnidad()
    {
        var respuesta = await http.Get<EditarUnidadDTO>($"api/Unidades/GetById/{id}");
        if (!respuesta.Error)
        {
            unidad = respuesta.Respuesta;
        }
        else
        {
            nav.NavigateTo("/api/Unidades");
        }
    }

    private async Task Actualizar()
    {
        var respuesta = await http.Put($"api/Unidades/{id}", unidad);

        if (!respuesta.Error)
        {
            // Actualizamos el mensaje globalmente a través del servicio
            mensajeService.Mensaje = "Se actualizó con éxito la unidad.";

            // Forzamos el renderizado (opcional, pero puede ser útil)
            StateHasChanged();

            // Redirigimos a la página de lista de 
            await Task.Delay(1500); // Espera para mostrar el mensaje
            nav.NavigateTo("/api/unidades");
        }
        else
        {
            var errorContent = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Unidades");
    }
}
