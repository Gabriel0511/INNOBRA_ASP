@page "/api/Unidades/crear"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService
@using Microsoft.AspNetCore.Components.Forms

<div class="fondo"></div>
<div class="overlay"></div>

<div class="contenedor-formulario">

    <h3>Agregar Unidad</h3>

    <!-- Sección para mostrar mensajes -->
    @if (!string.IsNullOrEmpty(mensajeService.Mensaje))
    {
        <div class="alert alert-info">
            @mensajeService.Mensaje
        </div>
    }

    <EditForm Model="@unidad" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div>
            <label>Nombre:</label>
            <InputText @bind-Value="unidad.Nombre" class="form-control" />
            <ValidationMessage For="@(() => unidad.Nombre)" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    private CrearUnidadDTO unidad = new CrearUnidadDTO();
    private List<Unidad> listaUnidad = new List<Unidad>();

    protected override async Task OnInitializedAsync()
    {
        await CargarUnidad();
    }

    private async Task CargarUnidad()
    {
        var respuesta = await http.Get<List<Unidad>>("api/Unidades");
        if (!respuesta.Error)
        {
            listaUnidad = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        // Verificar si la unidad ya existe en la lista
        if (listaUnidad.Any(u => u.Nombre.Equals(unidad.Nombre, StringComparison.OrdinalIgnoreCase)))
        {
            mensajeService.Mensaje = "Error: La unidad ya existe.";
            return;
        }

        // Intentar crear la unidad si no existe
        var httpRespuesta = await http.Post<CrearUnidadDTO>("api/Unidades", unidad);
        if (!httpRespuesta.Error)
        {
            mensajeService.Mensaje = "Unidad agregada con éxito.";
            nav.NavigateTo("/api/Unidades");
        }
        else
        {
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Unidades");
    }
}
