@page "/api/Unidades/crear"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService
@using Microsoft.AspNetCore.Components.Forms

<div class="fondo"></div>
<div class="overlay"></div>

<div class="contenedor-formulario">

    <h3>Agregar Unidad</h3>

    <EditForm Model="@unidad" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label>Nombre:</label>
            <InputText @bind-Value="unidad.Nombre" />
            <ValidationMessage For="@(() => unidad.Nombre)" />
        </div>

        <div class="mb-3">
            <label>Descripcion:</label>
            <InputText @bind-Value="unidad.Descripcion" />
            <ValidationMessage For="@(() => unidad.Descripcion)" />
        </div>

        <div class="mb-3">
            <label>Costo:</label>
            <InputNumber  @bind-Value="unidad.Costo" />
            <ValidationMessage For="@(() => unidad.Costo)" />
        </div>


        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>

@code {
    private Unidad unidad = new Unidad();
    private List<Unidad> listaUnidad = new List<Unidad>();

    protected override async Task OnInitializedAsync()
    {
        await CargarUnidad();
    }

    private async Task CargarUnidad()
    {
        var respuesta = await http.Get<List<Unidad>>("api/Unidades");
        if (!respuesta.Error)
        {
            listaUnidad = respuesta.Respuesta;
        }
    }

    private async Task Grabar()
    {
        var httpRespuesta = await http.Post<Unidad>("api/Unidades", unidad);
        if (!httpRespuesta.Error)
        {
            // Si se crea correctamente, establecer el mensaje
            mensajeService.Mensaje = "Unidad agregada con éxito.";

            // Redirigir a la página de lista después de un breve retraso
            await Task.Delay(1500);
            nav.NavigateTo("/api/Unidades");
        }
        else
        {
            // Si ocurre un error, establecer el mensaje de error
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Unidades");
    }

}