@page "/api/Unidades"
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@


<div class="fondo"></div>
    <div class="overlay"></div>

<div class="contenedor-formulario">

    <h3>Unidades</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
            <div class="alert alert-danger" role="alert">
            @Mensaje
            </div>
    }

    @if (cargando)
    {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
    }
    else if (listaUnidades != null && listaUnidades.Any())
    {
            <table>
                <thead>
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Costo</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var unidad in listaUnidades)
                {
                            <tr>
                                <td>@unidad.Nombre</td>
                                <td>@unidad.Descripcion</td>
                                <td>@unidad.Costo</td>

                                <td>
                                    <a class="btn btn-warning btn-sm" href="/api/Unidades/editar/@unidad.Id"><i class="bi bi-pencil"></i></a>
                                    <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(unidad.Id)"><i class="bi bi-trash3"></i></button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
    }
    else
    {
            <div class="alert alert-warning" role="alert">
                No hay unidades registradas.
            </div>
    }

    <br/>

    <a class="btn btn-success btn-sm" href="/api/Unidades/crear">
        <i class="bi bi-plus-circle"></i> Agregar Unidad
    </a>

</div>

@code {
    List<Unidad> listaUnidades = new List<Unidad>();
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Unidad>>("Api/Unidades");
        if (!resp.Error)
        {
            listaUnidades = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
        cargando = false; // Cambiar cargando a false al finalizar la carga
    }


    
    private async Task Eliminar(int id)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");

        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Unidades/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar la unidad: {ex.Message}";
            }
        }

    }

}