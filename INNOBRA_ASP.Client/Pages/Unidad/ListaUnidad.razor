@page "/api/Unidades"
@inject IHttpServicio http
<style>
    .fondo {
        position: relative;
        background-image: url('/images/InnObra.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        height: 100vh;
        color: white; /* Cambia el color del texto si es necesario */
    }

        .fondo::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
            z-index: 1;
        }

    .contenido {
        position: relative;
        z-index: 2; /* Asegura que el contenido esté por encima del fondo */
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.8); /* Fondo opaco para todo el contenido */
        border-radius: 10px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

        table th, table td {
            padding: 8px;
            text-align: left;
        }

        table th {
            background-color: #333;
            color: white;
            font-weight: bold;
        }

        table td {
            color: #333; /* Color negro oscuro para el texto en las celdas */
        }

        table th, table td {
            border-bottom: 1px solid #ccc;
        }

    .btn {
        margin: 5px 0;
    }

<div class="fondo">
    <div class="contenido">
        <h3>Lista de Unidades</h3>
        <br />
        <a class="btn btn-primary" href="/api/Unidades/crear">Nueva Unidad</a>
        <br />
        <table>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Costo</th>
            </tr>
            @if (Mensaje == "")
            {
                @if (listaUnidades == null)
                {
                    <p>Buscando....</p>
                }
                else if (listaUnidades.Count == 0)
                {
                    <p>No existen unidades</p>
                }
                else
                {
                    @foreach (var item in listaUnidades)
                    {
                        <tr>
                            <td>@item.Nombre</td>
                            <td>@item.Descripcion</td>
                            <td>@item.Costo</td>
                            <td>
                                <a class="btn btn-primary"
                                   href="api/Unidades/editar/@item.Id">
                                    Editar
                                </a>
                            </td>
                            <td>
                                <button class="btn btn-danger"
                                        @onclick="() => Eliminar(item)">
                                    Borrar
                                </button>
                            </td>
                        </tr>
                    }
                }
            }
            else
            {
                <p> Error: @Mensaje</p>
            }
        </table>

        <Confirmacion @ref="confirmacion"
                      Titulo="CUIDADO"
                      textCancelar="Salir"
                      onCancel="Cancelar"
                      onConfirm="Borrar">
            <h5>Está por borrar la unidad</h5>
            <br />
            <p>¿Está seguro?</p>
        </Confirmacion>
    </div>
</div>

@code {
    Confirmacion confirmacion;

    List<Unidad> listaUnidades;
    Unidad unidad;
    string Mensaje = "";

    Unidad? unidadBorrar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Unidad>>("api/Unidades");
        if (!resp.Error)
        {
            listaUnidades = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task Eliminar(Unidad unidad)
    {
        unidadBorrar = unidad;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        unidadBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Unidades/{unidadBorrar.Id}");
        if (respuesta.Error)
        {
            Mensaje = "No se pudo borrar la unidad";
        }
        Cancelar();
        await Leer();
    }
}
