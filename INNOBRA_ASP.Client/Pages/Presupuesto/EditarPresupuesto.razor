@page "/api/Presupuestos/editar/{idObra:int}/{idPresupuesto:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
<h3>Editar Presupuesto</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success">
        @mensaje
    </div>
}

<EditForm Model="@presupuesto" OnValidSubmit="Actualizar">
    <DataAnnotationsValidator />
  

    <div class="mb-3">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="presupuesto.Nombre" />
        <ValidationMessage For="@(() => presupuesto.Nombre)" />
    </div>

    <div class="mb-3">
        <label>Fecha Inicio</label>
        <InputDate class="form-control" @bind-Value="presupuesto.FechaInicioPrevista" />
        <ValidationMessage For="@(() => presupuesto.FechaInicioPrevista)" />
    </div>

    <div class="mb-3">
        <label>Fecha fin</label>
        <InputDate class="form-control" @bind-Value="presupuesto.FechaFinPrevista" />
        <ValidationMessage For="@(() => presupuesto.FechaFinPrevista)" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>
    </div>

@code {
    [Parameter]
    public int idPresupuesto { get; set; }

    [Parameter]
    public int idObra { get; set; }

    private EditarPresupuestoDTO presupuesto = new EditarPresupuestoDTO();
    private string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarPresupuesto();
    }

    private async Task CargarPresupuesto()
    {
        var respuesta = await http.Get<EditarPresupuestoDTO>($"Api/Presupuestos/GetById/{idPresupuesto}");

        if (!respuesta.Error)
        {
            presupuesto = respuesta.Respuesta;
        }
        else
        {
            // Muestra el contenido en caso de error para analizarlo
            var errorContent = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            Console.WriteLine($"Error Content: {errorContent}");
            mensaje = "Error al cargar el presupuesto.";
            nav.NavigateTo("/api/Presupuestos");
        }
    }

    private async Task Actualizar()
    {
        var respuesta = await http.Put($"Api/Presupuestos/{idPresupuesto}", presupuesto);

        if (!respuesta.Error)
        {
            // Actualizamos el mensaje globalmente a través del servicio
            mensajeService.Mensaje = "Se actualizó con éxito el presupuesto.";

            // Forzamos el renderizado (opcional, pero puede ser útil)
            StateHasChanged();

            // Redirigimos a la página de lista de
            await Task.Delay(500); // Espera para mostrar el mensaje
            nav.NavigateTo($"/api/Presupuestos/lista/{idObra}");
        }
        else
        {
            var errorContent = await respuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }
    }

    private void Cancelar()
    {

        nav.NavigateTo($"/api/Presupuestos/lista/{idObra}");
    }
}
