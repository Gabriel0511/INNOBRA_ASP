@page "/api/Presupuestos/crear/{id:int}"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav
@inject MensajeService mensajeService

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
    <h3>Crear Presupuesto</h3>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger" role="alert">
            @mensajeError
        </div>
    }

    <EditForm Model="@presupuesto" OnValidSubmit="Grabar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="presupuesto.Nombre" />
            <ValidationMessage For="@(() => presupuesto.Nombre)" />
        </div>

        <div class="mb-3">
            <label>Fecha de Inicio Prevista:</label>
            <InputDate class="form-control" @bind-Value="presupuesto.FechaInicioPrevista" />
            <ValidationMessage For="@(() => presupuesto.FechaInicioPrevista)" />
        </div>

        <div class="mb-3">
            <label>Fecha de Fin Prevista:</label>
            <InputDate class="form-control" @bind-Value="presupuesto.FechaFinPrevista" />
            <ValidationMessage For="@(() => presupuesto.FechaFinPrevista)" />
        </div>

        <div class="mb-3">
            <label>Obra</label>
            <div>
                <input type="text" class="form-control" value="@obraSeleccionada?.Nombre" readonly />
                <ValidationMessage For="@(() => presupuesto.Obra_Id)" />
            </div>
        </div>



        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
</div>


@code {
    [Parameter] public int id { get; set; }
    private Presupuesto presupuesto = new Presupuesto();
    private List<Presupuesto> listaPresupuestos = new();
    private List<Obra> obras = new List<Obra>();
    private Obra obraSeleccionada;

    private string mensajeError;

    protected override async Task OnInitializedAsync()
    {
        presupuesto.FechaInicioPrevista = DateTime.Now.Date;
        presupuesto.FechaFinPrevista = DateTime.Now.Date;

        // Cargar las obras
        await CargarObras();

        // Asignar la obra seleccionada a la propiedad presupuesto.Obra_Id
        obraSeleccionada = obras.FirstOrDefault(obra => obra.Id == id);

        if (obraSeleccionada != null)
        {
            presupuesto.Obra_Id = obraSeleccionada.Id; // Asigna el ID de la obra seleccionada al presupuesto
        }
        else
        {
            mensajeError = "Obra no encontrada.";
        }

        // Cargar los presupuestos si es necesario
        await CargarPresupuestos();
    }


    private async Task CargarPresupuestos()
    {
        var respuesta = await http.Get<List<Presupuesto>>("api/Presupuestos");
        if (!respuesta.Error)
        {
            listaPresupuestos = respuesta.Respuesta;
        }
        else
        {
            mensajeError = "Error al cargar los presupuestos.";
        }
    }

    private async Task CargarObras()
    {
        var respuesta = await http.Get<List<Obra>>("api/Obras");
        if (!respuesta.Error)
        {
            obras = respuesta.Respuesta; // Poblamos la lista de obras
        }
        else
        {
            mensajeError = "Error al cargar las obras.";
        }
    }

    private async Task Grabar()
    {
        if (presupuesto.Obra_Id == 0)
        {
            mensajeError = "Debe seleccionar una obra.";
            return;
        }

        var httpRespuesta = await http.Post<Presupuesto>("api/Presupuestos", presupuesto);

        if (!httpRespuesta.Error)
        {
            // Si se crea correctamente, establecer el mensaje
            mensajeService.Mensaje = "Presupuesto agregado con éxito.";

            // Redirigir a la página de lista después de un breve retraso
            await Task.Delay(1500);
            nav.NavigateTo("/api/Obras");
        }
        else
        {
            // Si ocurre un error, establecer el mensaje de error
            var errorContent = await httpRespuesta.HttpResponseMessage.Content.ReadAsStringAsync();
            mensajeService.Mensaje = $"Error: {errorContent}";
        }

        // if (httpRespuesta.Error)
        // {
        //     mensajeError = "Hubo un error al guardar el presupuesto.";
        // }
        // else
        // {
        //     nav.NavigateTo("/api/Presupuestos");
        // }
    }

    private void Cancelar()
    {
        nav.NavigateTo("/api/Obras");
    }
}
