@page "/api/Presupuestos/crear"
@inject IHttpServicio http
@using INNOBRA_ASP.Shared.DTO
@using System.Net.Http.Json
@inject NavigationManager nav

<div class="fondo">
    <div class="contenido">
<h3>Crear Presupuesto</h3>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger" role="alert">
        @mensajeError
    </div>
}

<EditForm Model="@presupuesto" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="presupuesto.Nombre" />
        <ValidationMessage For="@(() => presupuesto.Nombre)" />
    </div>

    <div class="mb-3">
        <label>Fecha de Inicio Prevista:</label>
        <InputDate class="form-control" @bind-Value="presupuesto.FechaInicioPrevista" />
        <ValidationMessage For="@(() => presupuesto.FechaInicioPrevista)" />
    </div>

    <div class="mb-3">
        <label>Fecha de Fin Prevista:</label>
        <InputDate class="form-control" @bind-Value="presupuesto.FechaFinPrevista" />
        <ValidationMessage For="@(() => presupuesto.FechaFinPrevista)" />
    </div>

    <div class="mb-3">
        <label>Obra</label>
        <div>
            <select class="form-control" @bind="presupuesto.Obra_Id">
                <option value="">Seleccione una obra</option>
                @foreach (var obra in obras)
                {
                    <option value="@obra.Id">@obra.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => presupuesto.Obra_Id)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>
    </div>
</div>

@code {
    private Presupuesto presupuesto = new Presupuesto();
    private List<Presupuesto> listaPresupuestos = new();
    private List<Obra> obras = new List<Obra>();

    private string mensajeError;

    protected override async Task OnInitializedAsync()
    {
        presupuesto.FechaInicioPrevista = DateTime.Now.Date;
        presupuesto.FechaFinPrevista = DateTime.Now.Date;
        await CargarObras();
        await CargarPresupuestos();
    }

    private async Task CargarPresupuestos()
    {
        // Llama al servicio para obtener la lista de presupuestos
        var respuesta = await http.Get<List<Presupuesto>>("api/Presupuestos");
        if (!respuesta.Error)
        {
            listaPresupuestos = respuesta.Respuesta;
        }
        else
        {
            mensajeError = "Error al cargar los presupuestos.";
        }
    }

    private async Task CargarObras()
    {
        // Llama al servicio para obtener la lista de obras
        var respuesta = await http.Get<List<Obra>>("api/Obras");
        if (!respuesta.Error)
        {
            obras = respuesta.Respuesta;  // Poblamos la lista de obras, no la de presupuestos
        }
        else
        {
            mensajeError = "Error al cargar las obras.";
        }
    }

    private async Task Grabar()
    {
        // Verificar que el Obra_Id es válido
        if (presupuesto.Obra_Id == 0)  // Suponiendo que 0 no es un ID válido en tu base de datos
        {
            mensajeError = "Debe seleccionar una categoría (obra).";
            return;
        }

        var httpRespuesta = await http.Post<Presupuesto>("api/Presupuestos", presupuesto);
        if (httpRespuesta.Error)
        {
            mensajeError = "Hubo un error al guardar el presupuesto.";
        }
        else
        {
            nav.NavigateTo("/api/Presupuestos");
        }
    }


    private void Cancelar()
    {
        nav.NavigateTo("/api/Presupuestos");
    }
}
