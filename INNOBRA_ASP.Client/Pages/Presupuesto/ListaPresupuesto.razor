@page "/api/Presupuestos/lista/{idObra:int}"
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizó con éxito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">

    <a class="btn btn-primary" href="/api/Obras">
        <i class="bi bi-arrow-left"></i> Volver
    </a>
    <h3>Presupuestos</h3>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-danger" role="alert">
            @Mensaje
        </div>
    }

    @if (cargando)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>

    }
    @if (listaPresupuestos != null && listaPresupuestos.Any(p => p.Obra_Id == idObra))
    {
        <table>
            <thead>
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Fecha Inicio</th>
                    <th scope="col">Fecha Fin</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var presupuesto in listaPresupuestos.Where(p => p.Obra_Id == idObra))
                {
                    <tr>
                        <td>@presupuesto.Nombre</td>
                        <td>@presupuesto.FechaInicioPrevista.ToString("dd-MM-yyyy")</td>
                        <td>@presupuesto.FechaFinPrevista.ToString("dd-MM-yyyy")</td>
                        <td>
                            <a class="btn btn-violet btn-sm" href="/api/Items/lista/@idObra/@presupuesto.Id" title="Ver Items"><i class="bi bi-eye" style="color: black;"></i></a>

                            <a class="btn btn-warning btn-sm" href="/api/Presupuestos/editar/@idObra/@presupuesto.Id">
                                <i class="bi bi-pencil"></i> 
                            </a>
                            
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(presupuesto.Id)">
                                <i class="bi bi-trash3"></i> 
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (cargando)
        {
            
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                No hay presupuestos disponibles para esta obra.
            </div>
        }
        
    }


    <br />
    <a class="btn btn-primary" href="/api/Presupuestos/crear/@idObra">
        <i class="bi bi-plus-circle"></i> Crear Presupuesto
    </a>
</div>

<style>
    .btn-violet {
        background-color: violet !important;
        color: white !important;
        border: none;
    }

        .btn-violet:hover {
            background-color: purple !important;
        }
</style>


@code {
    [Parameter] public int idObra { get; set; }

    List<Presupuesto> listaPresupuestos = new List<Presupuesto>();
    List<Item> items = new List<Item>();
    List<ItemTipo> itemTipos = new List<ItemTipo>();
    List<Avance> listaAvances = new List<Avance>();
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(1500);  // Espera 1.5 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer(); // Llamar a Leer al inicializar el componente
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar cualquier mensaje de error previo

            // Obtener los presupuestos para una obra específica
            var resp = await http.Get<List<Presupuesto>>("api/Presupuestos");
            if (!resp.Error)
            {
                listaPresupuestos = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los presupuestos: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task Eliminar(int id)
    {
        var resultado = await js.InvokeAsync<bool>("confirmSwal");

        if (resultado)
        {
            try
            {
                var resp = await http.Delete($"api/Presupuestos/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }
}
