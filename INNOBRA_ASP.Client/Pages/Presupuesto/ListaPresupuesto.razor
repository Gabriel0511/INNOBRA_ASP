@page "/api/Presupuestos"
@inject IHttpServicio http
@inject IJSRuntime js
@inject MensajeService mensajeService

<div class="alert alert-info" style="display: @(!string.IsNullOrEmpty(mensajeService.Mensaje) ? "block" : "none")">
    @mensajeService.Mensaje
</div> @* Muestra el mensaje que se actualizò con exito. *@

<div class="fondo"></div>
<div class="overlay"></div>
<div class="contenedor-formulario">
        <h3>Presupuestos</h3>

        @if (!string.IsNullOrEmpty(Mensaje))
        {
            <div class="alert alert-danger" role="alert">
                @Mensaje
            </div>
        }

        @if (cargando)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        }
        else if (listaPresupuestos != null && listaPresupuestos.Any())
        {
            <table>
                <thead>
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Fecha Inicio</th>
                        <th scope="col">Fecha Fin</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var presupuesto in listaPresupuestos)
                    {
                        <tr>
                            <td>@presupuesto.Nombre</td>
                            <td>@presupuesto.FechaInicioPrevista.ToString("dd-MM-yyyy")</td>
                            <td>@presupuesto.FechaFinPrevista.ToString("dd-MM-yyyy")</td>
                            <td>
                                <a class="btn btn-warning btn-sm" href="/api/Presupuestos/editar/@presupuesto.Id"><i class="bi bi-pencil"></i></a>
                                <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(presupuesto.Id)"><i class="bi bi-trash3"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                No hay presupuestos disponibles.
            </div>
        }
        <br />
        <a class="btn btn-primary" href="/api/Presupuestos/crear">
            <i class="bi bi-plus-circle"></i> Crear Presupuesto
        </a>
    </div>

@code {
    List<Presupuesto> listaPresupuestos = new List<Presupuesto>();
    string Mensaje = "";
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!string.IsNullOrEmpty(mensajeService.Mensaje))
        {
            await Task.Delay(3000);  // Espera 3 segundos
            mensajeService.Mensaje = string.Empty;  // Borra el mensaje
        }
        await Leer(); // Llamar a Leer al inicializar el componente
    }

    private async Task Leer()
    {
        try
        {
            cargando = true;
            Mensaje = ""; // Limpiar cualquier mensaje de error previo

            var resp = await http.Get<List<Presupuesto>>("api/Presupuestos");
            if (!resp.Error)
            {
                listaPresupuestos = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Ocurrió un error al cargar los presupuestos: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task Eliminar(int id)
    {
        bool confirmado = await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este presupuesto?");
        if (confirmado)
        {
            try
            {
                var resp = await http.Delete($"api/Presupuestos/{id}");
                if (!resp.Error)
                {
                    await Leer(); // Recarga la lista después de eliminar
                }
                else
                {
                    Mensaje = await resp.ObtenerError();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Ocurrió un error al eliminar el presupuesto: {ex.Message}";
            }
        }
    }
}
